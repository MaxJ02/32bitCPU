
32bitCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000480  00800100  00800100  00000ea0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f3  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae7  00000000  00000000  0000230b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa0  00000000  00000000  00002df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000569  00000000  00000000  00003fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  68:	56 05       	cpc	r21, r6
  6a:	bb 01       	movw	r22, r22
  6c:	d2 01       	movw	r26, r4
  6e:	f0 01       	movw	r30, r0
  70:	05 02       	muls	r16, r21
  72:	1d 02       	muls	r17, r29
  74:	33 02       	muls	r19, r19
  76:	4c 02       	muls	r20, r28
  78:	5b 02       	muls	r21, r27
  7a:	82 02       	muls	r24, r18
  7c:	a9 02       	muls	r26, r25
  7e:	d0 02       	muls	r29, r16
  80:	fd 02       	muls	r31, r29
  82:	2a 03       	fmul	r18, r18
  84:	57 03       	mulsu	r21, r23
  86:	7e 03       	fmul	r23, r22
  88:	a5 03       	fmuls	r18, r21
  8a:	d2 03       	fmuls	r21, r18
  8c:	ff 03       	fmulsu	r23, r23
  8e:	22 04       	cpc	r2, r2
  90:	45 04       	cpc	r4, r5
  92:	68 04       	cpc	r6, r8
  94:	cb 04       	cpc	r12, r11
  96:	d4 04       	cpc	r13, r4
  98:	e1 04       	cpc	r14, r1
  9a:	ee 04       	cpc	r14, r14
  9c:	fb 04       	cpc	r15, r11
  9e:	0a 05       	cpc	r16, r10
  a0:	19 05       	cpc	r17, r9
  a2:	91 04       	cpc	r9, r1
  a4:	a2 04       	cpc	r10, r2
  a6:	54 05       	cpc	r21, r4
  a8:	a9 04       	cpc	r10, r9
  aa:	ba 04       	cpc	r11, r10
  ac:	26 05       	cpc	r18, r6
  ae:	3d 05       	cpc	r19, r13

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d8 e0       	ldi	r29, 0x08	; 8
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_clear_bss>:
  bc:	25 e0       	ldi	r18, 0x05	; 5
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	a0 38       	cpi	r26, 0x80	; 128
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 99 05 	call	0xb32	; 0xb32 <main>
  d0:	0c 94 14 07 	jmp	0xe28	; 0xe28 <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <alu>:
********************************************************************************/
uint32_t alu(const uint32_t operation,
            const uint32_t a,
            const uint32_t b,
            uint8_t* sr)
{
  d8:	8f 92       	push	r8
  da:	9f 92       	push	r9
  dc:	af 92       	push	r10
  de:	bf 92       	push	r11
  e0:	cf 92       	push	r12
  e2:	df 92       	push	r13
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	f6 01       	movw	r30, r12
   uint32_t result = 0x00;
   *sr &= ~((1 << S) | (1 << N) | (1 << Z) | (1 << V) | (1 << C));
  f0:	a0 81       	ld	r26, Z
  f2:	ca 2f       	mov	r28, r26
  f4:	c0 7e       	andi	r28, 0xE0	; 224
  f6:	c0 83       	st	Z, r28

   switch (operation)
  f8:	6d 30       	cpi	r22, 0x0D	; 13
  fa:	71 05       	cpc	r23, r1
  fc:	81 05       	cpc	r24, r1
  fe:	91 05       	cpc	r25, r1
 100:	29 f1       	breq	.+74     	; 0x14c <alu+0x74>
 102:	58 f4       	brcc	.+22     	; 0x11a <alu+0x42>
 104:	6b 30       	cpi	r22, 0x0B	; 11
 106:	71 05       	cpc	r23, r1
 108:	81 05       	cpc	r24, r1
 10a:	91 05       	cpc	r25, r1
 10c:	89 f0       	breq	.+34     	; 0x130 <alu+0x58>
 10e:	6c 30       	cpi	r22, 0x0C	; 12
 110:	71 05       	cpc	r23, r1
 112:	81 05       	cpc	r24, r1
 114:	91 05       	cpc	r25, r1
 116:	99 f0       	breq	.+38     	; 0x13e <alu+0x66>
 118:	4b c0       	rjmp	.+150    	; 0x1b0 <alu+0xd8>
 11a:	60 31       	cpi	r22, 0x10	; 16
 11c:	71 05       	cpc	r23, r1
 11e:	81 05       	cpc	r24, r1
 120:	91 05       	cpc	r25, r1
 122:	d9 f0       	breq	.+54     	; 0x15a <alu+0x82>
 124:	61 31       	cpi	r22, 0x11	; 17
 126:	71 05       	cpc	r23, r1
 128:	81 05       	cpc	r24, r1
 12a:	91 05       	cpc	r25, r1
 12c:	e9 f0       	breq	.+58     	; 0x168 <alu+0x90>
 12e:	40 c0       	rjmp	.+128    	; 0x1b0 <alu+0xd8>
   {
      case OR:
      {
         result = a | b; 
 130:	ca 01       	movw	r24, r20
 132:	b9 01       	movw	r22, r18
 134:	6e 29       	or	r22, r14
 136:	7f 29       	or	r23, r15
 138:	80 2b       	or	r24, r16
 13a:	91 2b       	or	r25, r17
         break;
 13c:	3c c0       	rjmp	.+120    	; 0x1b6 <alu+0xde>
      }
      case AND:
      {
         result = a & b;
 13e:	ca 01       	movw	r24, r20
 140:	b9 01       	movw	r22, r18
 142:	6e 21       	and	r22, r14
 144:	7f 21       	and	r23, r15
 146:	80 23       	and	r24, r16
 148:	91 23       	and	r25, r17
         break;
 14a:	35 c0       	rjmp	.+106    	; 0x1b6 <alu+0xde>
      }
      case XOR:
      {
         result = a ^ b;
 14c:	ca 01       	movw	r24, r20
 14e:	b9 01       	movw	r22, r18
 150:	6e 25       	eor	r22, r14
 152:	7f 25       	eor	r23, r15
 154:	80 27       	eor	r24, r16
 156:	91 27       	eor	r25, r17
         break;
 158:	2e c0       	rjmp	.+92     	; 0x1b6 <alu+0xde>
      }
      case ADD:
      {
         result = a + b;
 15a:	ca 01       	movw	r24, r20
 15c:	b9 01       	movw	r22, r18
 15e:	6e 0d       	add	r22, r14
 160:	7f 1d       	adc	r23, r15
 162:	80 1f       	adc	r24, r16
 164:	91 1f       	adc	r25, r17
 166:	27 c0       	rjmp	.+78     	; 0x1b6 <alu+0xde>
         }
         break;
      }
      case SUB:
      {
         result = a + (256 - b); /* 256 - b is the 2-complement representation of B. */
 168:	da 01       	movw	r26, r20
 16a:	c9 01       	movw	r24, r18
 16c:	8e 19       	sub	r24, r14
 16e:	9f 09       	sbc	r25, r15
 170:	a0 0b       	sbc	r26, r16
 172:	b1 0b       	sbc	r27, r17
 174:	bc 01       	movw	r22, r24
 176:	cd 01       	movw	r24, r26
 178:	7f 5f       	subi	r23, 0xFF	; 255
 17a:	8f 4f       	sbci	r24, 0xFF	; 255
 17c:	9f 4f       	sbci	r25, 0xFF	; 255
*       - reg: Reference to the register.
*       - bit: The bit to be read in the referenced register.
********************************************************************************/
static inline bool read(const uint32_t reg, const uint8_t bit)
{
	return (bool)(reg & (1 << bit));
 17e:	a1 e0       	ldi	r26, 0x01	; 1
 180:	27 ff       	sbrs	r18, 7
 182:	a0 e0       	ldi	r26, 0x00	; 0

         if ((read(a, 7) == read((256 - b), 7)) && (read(result, 7) != read(a, 7)))
 184:	81 2c       	mov	r8, r1
 186:	91 2c       	mov	r9, r1
 188:	54 01       	movw	r10, r8
 18a:	93 94       	inc	r9
 18c:	8e 18       	sub	r8, r14
 18e:	9f 08       	sbc	r9, r15
 190:	a0 0a       	sbc	r10, r16
 192:	b1 0a       	sbc	r11, r17
 194:	11 e0       	ldi	r17, 0x01	; 1
 196:	87 fe       	sbrs	r8, 7
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	1a 13       	cpse	r17, r26
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <alu+0xde>
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	67 ff       	sbrs	r22, 7
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	a2 17       	cp	r26, r18
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <alu+0xde>
         {
            set(*sr, V);
 1a8:	3c 2f       	mov	r19, r28
 1aa:	32 60       	ori	r19, 0x02	; 2
 1ac:	30 83       	st	Z, r19
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <alu+0xde>
uint32_t alu(const uint32_t operation,
            const uint32_t a,
            const uint32_t b,
            uint8_t* sr)
{
   uint32_t result = 0x00;
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	cb 01       	movw	r24, r22
         break;
      }
   }

   if (read(result, 32) == 1)         set(*sr, N);
   if ((uint32_t)(result) == 0)       set(*sr, Z);
 1b6:	61 15       	cp	r22, r1
 1b8:	71 05       	cpc	r23, r1
 1ba:	81 05       	cpc	r24, r1
 1bc:	91 05       	cpc	r25, r1
 1be:	19 f4       	brne	.+6      	; 0x1c6 <alu+0xee>
 1c0:	20 81       	ld	r18, Z
 1c2:	24 60       	ori	r18, 0x04	; 4
 1c4:	20 83       	st	Z, r18
   if (read(result, 32) == 1)         set(*sr, C);
   if (read(*sr, N) != read(*sr, V)) set(*sr, S);
 1c6:	30 81       	ld	r19, Z
 1c8:	33 fb       	bst	r19, 3
 1ca:	44 27       	eor	r20, r20
 1cc:	40 f9       	bld	r20, 0
 1ce:	31 fb       	bst	r19, 1
 1d0:	22 27       	eor	r18, r18
 1d2:	20 f9       	bld	r18, 0
 1d4:	24 17       	cp	r18, r20
 1d6:	19 f0       	breq	.+6      	; 0x1de <alu+0x106>
 1d8:	23 2f       	mov	r18, r19
 1da:	20 61       	ori	r18, 0x10	; 16
 1dc:	20 83       	st	Z, r18

   return (uint32_t)(result);
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	df 90       	pop	r13
 1ea:	cf 90       	pop	r12
 1ec:	bf 90       	pop	r11
 1ee:	af 90       	pop	r10
 1f0:	9f 90       	pop	r9
 1f2:	8f 90       	pop	r8
 1f4:	08 95       	ret

000001f6 <control_unit_reset>:
/********************************************************************************
* control_unit_reset: Resets control unit registers and corresponding program.
********************************************************************************/
void control_unit_reset(void)
{
   ir = 0x00;
 1f6:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <ir>
 1fa:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <ir+0x1>
 1fe:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <ir+0x2>
 202:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <ir+0x3>
 206:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <ir+0x4>
 20a:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ir+0x5>
 20e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ir+0x6>
 212:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <ir+0x7>
   pc = 0x00;
 216:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <pc+0x1>
 21a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pc>
   mar = 0x00;
   sr = 0x00;
 21e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <sr>

   op_code = 0x00;
 222:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <op_code+0x1>
 226:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <op_code>
   op1 = 0x00;
 22a:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <op1+0x1>
 22e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <op1>
   op2 = 0x00;
 232:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <op2>
 236:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <op2+0x1>
 23a:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <op2+0x2>
 23e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <op2+0x3>

   state = CPU_STATE_FETCH;
 242:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>

   for (uint32_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	dc 01       	movw	r26, r24
 24c:	0e c0       	rjmp	.+28     	; 0x26a <control_unit_reset+0x74>
   {
      reg[i] = 0x00;
 24e:	fc 01       	movw	r30, r24
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	e0 50       	subi	r30, 0x00	; 0
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	10 82       	st	Z, r1
 25e:	11 82       	std	Z+1, r1	; 0x01
 260:	12 82       	std	Z+2, r1	; 0x02
 262:	13 82       	std	Z+3, r1	; 0x03
   op1 = 0x00;
   op2 = 0x00;

   state = CPU_STATE_FETCH;

   for (uint32_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	a1 1d       	adc	r26, r1
 268:	b1 1d       	adc	r27, r1
 26a:	80 32       	cpi	r24, 0x20	; 32
 26c:	91 05       	cpc	r25, r1
 26e:	a1 05       	cpc	r26, r1
 270:	b1 05       	cpc	r27, r1
 272:	68 f3       	brcs	.-38     	; 0x24e <control_unit_reset+0x58>
   {
      reg[i] = 0x00;
   }

   
   data_memory_reset();
 274:	0e 94 64 05 	call	0xac8	; 0xac8 <data_memory_reset>
   stack_reset();
 278:	0e 94 6f 06 	call	0xcde	; 0xcde <stack_reset>
   program_memory_write();
 27c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <program_memory_write>
 280:	08 95       	ret

00000282 <control_unit_run_next_state>:

/********************************************************************************
* control_unit_run_next_state: Runs next state in the CPU instruction cycle:
********************************************************************************/
void control_unit_run_next_state(void)
{
 282:	cf 92       	push	r12
 284:	df 92       	push	r13
 286:	ef 92       	push	r14
 288:	ff 92       	push	r15
 28a:	0f 93       	push	r16
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
   switch (state)
 292:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <state>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	41 f1       	breq	.+80     	; 0x2ea <control_unit_run_next_state+0x68>
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <control_unit_run_next_state+0x22>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	09 f4       	brne	.+2      	; 0x2a2 <control_unit_run_next_state+0x20>
 2a0:	5e c0       	rjmp	.+188    	; 0x35e <control_unit_run_next_state+0xdc>
 2a2:	07 c4       	rjmp	.+2062   	; 0xab2 <__stack+0x1b3>
   {
      case CPU_STATE_FETCH:
      {
         ir = program_memory_read(pc); /* Fetches next instruction. */
 2a4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <pc>
 2a8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <pc+0x1>
 2ac:	0e 94 51 06 	call	0xca2	; 0xca2 <program_memory_read>
 2b0:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <ir>
 2b4:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <ir+0x1>
 2b8:	40 93 8e 01 	sts	0x018E, r20	; 0x80018e <ir+0x2>
 2bc:	50 93 8f 01 	sts	0x018F, r21	; 0x80018f <ir+0x3>
 2c0:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <ir+0x4>
 2c4:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <ir+0x5>
 2c8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <ir+0x6>
 2cc:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <ir+0x7>
         mar = pc;                     /* Stores address of current instruction. */
 2d0:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <pc>
 2d4:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <pc+0x1>
         pc++;                         /* Program counter points to next instruction. */
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 2de:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
         state = CPU_STATE_DECODE;     /* Decodes the instruction during next clock cycle. */
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
         break;
 2e8:	e6 c3       	rjmp	.+1996   	; 0xab6 <__stack+0x1b7>
      }
      case CPU_STATE_DECODE:
      {        
         op_code = ir >> 48;           /* Bit 23 downto 16 consists of the OP code. */
 2ea:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <ir>
 2ee:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <ir+0x1>
 2f2:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <ir+0x2>
 2f6:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <ir+0x3>
 2fa:	f0 90 90 01 	lds	r15, 0x0190	; 0x800190 <ir+0x4>
 2fe:	10 91 91 01 	lds	r17, 0x0191	; 0x800191 <ir+0x5>
 302:	d0 91 92 01 	lds	r29, 0x0192	; 0x800192 <ir+0x6>
 306:	c0 91 93 01 	lds	r28, 0x0193	; 0x800193 <ir+0x7>
 30a:	2b 2f       	mov	r18, r27
 30c:	3a 2f       	mov	r19, r26
 30e:	4f 2f       	mov	r20, r31
 310:	5e 2f       	mov	r21, r30
 312:	6f 2d       	mov	r22, r15
 314:	71 2f       	mov	r23, r17
 316:	8d 2f       	mov	r24, r29
 318:	9c 2f       	mov	r25, r28
 31a:	00 e3       	ldi	r16, 0x30	; 48
 31c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__lshrdi3>
 320:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <op_code>
 324:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <op_code+0x1>
         op1 = ir >> 32;                /* Bit 15 downto 8 consists of the first operand. */
 328:	2b 2f       	mov	r18, r27
 32a:	3a 2f       	mov	r19, r26
 32c:	4f 2f       	mov	r20, r31
 32e:	5e 2f       	mov	r21, r30
 330:	6f 2d       	mov	r22, r15
 332:	71 2f       	mov	r23, r17
 334:	8d 2f       	mov	r24, r29
 336:	9c 2f       	mov	r25, r28
 338:	00 e2       	ldi	r16, 0x20	; 32
 33a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__lshrdi3>
 33e:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <op1>
 342:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <op1+0x1>
         op2 = ir;                     /* Bit 7 downto 0 consists of the second operand. */
 346:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <op2>
 34a:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <op2+0x1>
 34e:	f0 93 83 01 	sts	0x0183, r31	; 0x800183 <op2+0x2>
 352:	e0 93 84 01 	sts	0x0184, r30	; 0x800184 <op2+0x3>
         state = CPU_STATE_EXECUTE;    /* Executes the instruction during next clock cycle. */
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <state>
         break;
 35c:	ac c3       	rjmp	.+1880   	; 0xab6 <__stack+0x1b7>
      }
      case CPU_STATE_EXECUTE:
      {
         switch (op_code) /* Checks the OP code.*/
 35e:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <op_code>
 362:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <op_code+0x1>
 366:	e4 32       	cpi	r30, 0x24	; 36
 368:	f1 05       	cpc	r31, r1
 36a:	08 f0       	brcs	.+2      	; 0x36e <control_unit_run_next_state+0xec>
 36c:	9d c3       	rjmp	.+1850   	; 0xaa8 <__stack+0x1a9>
 36e:	ec 5c       	subi	r30, 0xCC	; 204
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__tablejump2__>
         {
            break; 
         }
            case LDI: /* LDI R16, 0x01 => op_code = LDI, op1 = R16, op2 = 0x01 */
            {
               reg[op1] = op2; 
 376:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 37a:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	e0 50       	subi	r30, 0x00	; 0
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <op2>
 38e:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <op2+0x1>
 392:	a0 91 83 01 	lds	r26, 0x0183	; 0x800183 <op2+0x2>
 396:	b0 91 84 01 	lds	r27, 0x0184	; 0x800184 <op2+0x3>
 39a:	80 83       	st	Z, r24
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	a2 83       	std	Z+2, r26	; 0x02
 3a0:	b3 83       	std	Z+3, r27	; 0x03
               break;
 3a2:	84 c3       	rjmp	.+1800   	; 0xaac <__stack+0x1ad>
            }
            case MOV: /* MOV R17, R16 => op_code = MOV, op1 = R17, op2 = R16 */
            {
               reg[op1] = reg[op2]; 
 3a4:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 3a8:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 3ac:	a0 91 81 01 	lds	r26, 0x0181	; 0x800181 <op2>
 3b0:	b0 91 82 01 	lds	r27, 0x0182	; 0x800182 <op2+0x1>
 3b4:	aa 0f       	add	r26, r26
 3b6:	bb 1f       	adc	r27, r27
 3b8:	aa 0f       	add	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	a0 50       	subi	r26, 0x00	; 0
 3be:	bf 4f       	sbci	r27, 0xFF	; 255
 3c0:	8d 91       	ld	r24, X+
 3c2:	9d 91       	ld	r25, X+
 3c4:	0d 90       	ld	r0, X+
 3c6:	bc 91       	ld	r27, X
 3c8:	a0 2d       	mov	r26, r0
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	ee 0f       	add	r30, r30
 3d0:	ff 1f       	adc	r31, r31
 3d2:	e0 50       	subi	r30, 0x00	; 0
 3d4:	ff 4f       	sbci	r31, 0xFF	; 255
 3d6:	80 83       	st	Z, r24
 3d8:	91 83       	std	Z+1, r25	; 0x01
 3da:	a2 83       	std	Z+2, r26	; 0x02
 3dc:	b3 83       	std	Z+3, r27	; 0x03
               break;
 3de:	66 c3       	rjmp	.+1740   	; 0xaac <__stack+0x1ad>
            }
            case OUT: /* OUT DDRB, R16 => op_code = OUT, op1 = DDRB, op2 = R16 */
            {
               data_memory_write(op1, reg[op2]); /* Writes to address 0 - 255. */
 3e0:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 3e4:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	e0 50       	subi	r30, 0x00	; 0
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	40 81       	ld	r20, Z
 3f6:	51 81       	ldd	r21, Z+1	; 0x01
 3f8:	62 81       	ldd	r22, Z+2	; 0x02
 3fa:	73 81       	ldd	r23, Z+3	; 0x03
 3fc:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 400:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 404:	0e 94 77 05 	call	0xaee	; 0xaee <data_memory_write>
               break;
 408:	51 c3       	rjmp	.+1698   	; 0xaac <__stack+0x1ad>
            }
            case IN: /* IN R16, PINB => op_code = IN, op1 = R16, op2 = PINB */
            {
               reg[op1] = data_memory_read(op2); /* Reads from address 0 - 255. */
 40a:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 40e:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 412:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <op2>
 416:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <op2+0x1>
 41a:	0e 94 8b 05 	call	0xb16	; 0xb16 <data_memory_read>
 41e:	cc 0f       	add	r28, r28
 420:	dd 1f       	adc	r29, r29
 422:	cc 0f       	add	r28, r28
 424:	dd 1f       	adc	r29, r29
 426:	c0 50       	subi	r28, 0x00	; 0
 428:	df 4f       	sbci	r29, 0xFF	; 255
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	a0 e0       	ldi	r26, 0x00	; 0
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	88 83       	st	Y, r24
 432:	99 83       	std	Y+1, r25	; 0x01
 434:	aa 83       	std	Y+2, r26	; 0x02
 436:	bb 83       	std	Y+3, r27	; 0x03
               break;
 438:	39 c3       	rjmp	.+1650   	; 0xaac <__stack+0x1ad>
            }
            case STS: /* STS counter, R16 => op_code = STS, op1 = counter, op2 = R16 */
            {
               data_memory_write(op1 + 256, reg[op2]); /* Offset 256 => writes to address 256 - 511. */
 43a:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 43e:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	e0 50       	subi	r30, 0x00	; 0
 44c:	ff 4f       	sbci	r31, 0xFF	; 255
 44e:	40 81       	ld	r20, Z
 450:	51 81       	ldd	r21, Z+1	; 0x01
 452:	62 81       	ldd	r22, Z+2	; 0x02
 454:	73 81       	ldd	r23, Z+3	; 0x03
 456:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 45a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 45e:	93 95       	inc	r25
 460:	0e 94 77 05 	call	0xaee	; 0xaee <data_memory_write>
               break;
 464:	23 c3       	rjmp	.+1606   	; 0xaac <__stack+0x1ad>
            }
            case LDS: /* LDS R16, counter => op_code = LDS, op1 = R16, op2 = counter */
            {
               reg[op1] = data_memory_read(op2 + 256); /* Offset 256 => reads from address 256 - 511. */
 466:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 46a:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 46e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <op2>
 472:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <op2+0x1>
 476:	93 95       	inc	r25
 478:	0e 94 8b 05 	call	0xb16	; 0xb16 <data_memory_read>
 47c:	cc 0f       	add	r28, r28
 47e:	dd 1f       	adc	r29, r29
 480:	cc 0f       	add	r28, r28
 482:	dd 1f       	adc	r29, r29
 484:	c0 50       	subi	r28, 0x00	; 0
 486:	df 4f       	sbci	r29, 0xFF	; 255
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	a0 e0       	ldi	r26, 0x00	; 0
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	88 83       	st	Y, r24
 490:	99 83       	std	Y+1, r25	; 0x01
 492:	aa 83       	std	Y+2, r26	; 0x02
 494:	bb 83       	std	Y+3, r27	; 0x03
               break;
 496:	0a c3       	rjmp	.+1556   	; 0xaac <__stack+0x1ad>
            }
            case CLR: /* CLR R16 => op_code = CLR, op1 = R16 */
            {
               reg[op1] = 0x00; /* Clears content of CPU register. */
 498:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 49c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 4a0:	ee 0f       	add	r30, r30
 4a2:	ff 1f       	adc	r31, r31
 4a4:	ee 0f       	add	r30, r30
 4a6:	ff 1f       	adc	r31, r31
 4a8:	e0 50       	subi	r30, 0x00	; 0
 4aa:	ff 4f       	sbci	r31, 0xFF	; 255
 4ac:	10 82       	st	Z, r1
 4ae:	11 82       	std	Z+1, r1	; 0x01
 4b0:	12 82       	std	Z+2, r1	; 0x02
 4b2:	13 82       	std	Z+3, r1	; 0x03
               break;
 4b4:	fb c2       	rjmp	.+1526   	; 0xaac <__stack+0x1ad>
            }
            case ORI: /* ORI R16, 0x01 => op_code = ORI, op1 = R16, op2 = 0x01 */
            {
               reg[op1] = alu(OR, reg[op1], op2, &sr);
 4b6:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 4ba:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 4be:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <op2>
 4c2:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <op2+0x1>
 4c6:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <op2+0x2>
 4ca:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <op2+0x3>
 4ce:	cc 0f       	add	r28, r28
 4d0:	dd 1f       	adc	r29, r29
 4d2:	cc 0f       	add	r28, r28
 4d4:	dd 1f       	adc	r29, r29
 4d6:	c0 50       	subi	r28, 0x00	; 0
 4d8:	df 4f       	sbci	r29, 0xFF	; 255
 4da:	28 81       	ld	r18, Y
 4dc:	39 81       	ldd	r19, Y+1	; 0x01
 4de:	4a 81       	ldd	r20, Y+2	; 0x02
 4e0:	5b 81       	ldd	r21, Y+3	; 0x03
 4e2:	0f 2e       	mov	r0, r31
 4e4:	f9 e8       	ldi	r31, 0x89	; 137
 4e6:	cf 2e       	mov	r12, r31
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	df 2e       	mov	r13, r31
 4ec:	f0 2d       	mov	r31, r0
 4ee:	6b e0       	ldi	r22, 0x0B	; 11
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 4fa:	68 83       	st	Y, r22
 4fc:	79 83       	std	Y+1, r23	; 0x01
 4fe:	8a 83       	std	Y+2, r24	; 0x02
 500:	9b 83       	std	Y+3, r25	; 0x03
               break;
 502:	d4 c2       	rjmp	.+1448   	; 0xaac <__stack+0x1ad>
            }
            case ANDI: /* ANDI R16, 0x01 => op_code = ANDI, op1 = R16, op2 = 0x01 */
            {
               reg[op1] = alu(AND, reg[op1], op2, &sr);
 504:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 508:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 50c:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <op2>
 510:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <op2+0x1>
 514:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <op2+0x2>
 518:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <op2+0x3>
 51c:	cc 0f       	add	r28, r28
 51e:	dd 1f       	adc	r29, r29
 520:	cc 0f       	add	r28, r28
 522:	dd 1f       	adc	r29, r29
 524:	c0 50       	subi	r28, 0x00	; 0
 526:	df 4f       	sbci	r29, 0xFF	; 255
 528:	28 81       	ld	r18, Y
 52a:	39 81       	ldd	r19, Y+1	; 0x01
 52c:	4a 81       	ldd	r20, Y+2	; 0x02
 52e:	5b 81       	ldd	r21, Y+3	; 0x03
 530:	0f 2e       	mov	r0, r31
 532:	f9 e8       	ldi	r31, 0x89	; 137
 534:	cf 2e       	mov	r12, r31
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	df 2e       	mov	r13, r31
 53a:	f0 2d       	mov	r31, r0
 53c:	6c e0       	ldi	r22, 0x0C	; 12
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 548:	68 83       	st	Y, r22
 54a:	79 83       	std	Y+1, r23	; 0x01
 54c:	8a 83       	std	Y+2, r24	; 0x02
 54e:	9b 83       	std	Y+3, r25	; 0x03
               break;
 550:	ad c2       	rjmp	.+1370   	; 0xaac <__stack+0x1ad>
            }
            case XORI: /* XORI R16, 0x01 => op_code = XORI, op1 = R16, op2 = 0x01 */
            {
               reg[op1] = alu(XOR, reg[op1], op2, &sr);
 552:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 556:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 55a:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <op2>
 55e:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <op2+0x1>
 562:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <op2+0x2>
 566:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <op2+0x3>
 56a:	cc 0f       	add	r28, r28
 56c:	dd 1f       	adc	r29, r29
 56e:	cc 0f       	add	r28, r28
 570:	dd 1f       	adc	r29, r29
 572:	c0 50       	subi	r28, 0x00	; 0
 574:	df 4f       	sbci	r29, 0xFF	; 255
 576:	28 81       	ld	r18, Y
 578:	39 81       	ldd	r19, Y+1	; 0x01
 57a:	4a 81       	ldd	r20, Y+2	; 0x02
 57c:	5b 81       	ldd	r21, Y+3	; 0x03
 57e:	0f 2e       	mov	r0, r31
 580:	f9 e8       	ldi	r31, 0x89	; 137
 582:	cf 2e       	mov	r12, r31
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	df 2e       	mov	r13, r31
 588:	f0 2d       	mov	r31, r0
 58a:	6d e0       	ldi	r22, 0x0D	; 13
 58c:	70 e0       	ldi	r23, 0x00	; 0
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 596:	68 83       	st	Y, r22
 598:	79 83       	std	Y+1, r23	; 0x01
 59a:	8a 83       	std	Y+2, r24	; 0x02
 59c:	9b 83       	std	Y+3, r25	; 0x03
               break;
 59e:	86 c2       	rjmp	.+1292   	; 0xaac <__stack+0x1ad>
            }
            case OR:  /* OR R16, R17 => op_code = OR, op1 = R16, op2 = R17 */
            {
               reg[op1] = alu(OR, reg[op1], reg[op2], &sr);
 5a0:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 5a4:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 5a8:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 5ac:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	e0 50       	subi	r30, 0x00	; 0
 5ba:	ff 4f       	sbci	r31, 0xFF	; 255
 5bc:	e0 80       	ld	r14, Z
 5be:	f1 80       	ldd	r15, Z+1	; 0x01
 5c0:	02 81       	ldd	r16, Z+2	; 0x02
 5c2:	13 81       	ldd	r17, Z+3	; 0x03
 5c4:	cc 0f       	add	r28, r28
 5c6:	dd 1f       	adc	r29, r29
 5c8:	cc 0f       	add	r28, r28
 5ca:	dd 1f       	adc	r29, r29
 5cc:	c0 50       	subi	r28, 0x00	; 0
 5ce:	df 4f       	sbci	r29, 0xFF	; 255
 5d0:	28 81       	ld	r18, Y
 5d2:	39 81       	ldd	r19, Y+1	; 0x01
 5d4:	4a 81       	ldd	r20, Y+2	; 0x02
 5d6:	5b 81       	ldd	r21, Y+3	; 0x03
 5d8:	0f 2e       	mov	r0, r31
 5da:	f9 e8       	ldi	r31, 0x89	; 137
 5dc:	cf 2e       	mov	r12, r31
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	df 2e       	mov	r13, r31
 5e2:	f0 2d       	mov	r31, r0
 5e4:	6b e0       	ldi	r22, 0x0B	; 11
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 5f0:	68 83       	st	Y, r22
 5f2:	79 83       	std	Y+1, r23	; 0x01
 5f4:	8a 83       	std	Y+2, r24	; 0x02
 5f6:	9b 83       	std	Y+3, r25	; 0x03
               break;
 5f8:	59 c2       	rjmp	.+1202   	; 0xaac <__stack+0x1ad>
            }
            case AND: /* AND R16, R17 => op_code = AND, op1 = R16, op2 = R17 */
            {
               reg[op1] = alu(AND, reg[op1], reg[op2], &sr);
 5fa:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 5fe:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 602:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 606:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	e0 50       	subi	r30, 0x00	; 0
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	e0 80       	ld	r14, Z
 618:	f1 80       	ldd	r15, Z+1	; 0x01
 61a:	02 81       	ldd	r16, Z+2	; 0x02
 61c:	13 81       	ldd	r17, Z+3	; 0x03
 61e:	cc 0f       	add	r28, r28
 620:	dd 1f       	adc	r29, r29
 622:	cc 0f       	add	r28, r28
 624:	dd 1f       	adc	r29, r29
 626:	c0 50       	subi	r28, 0x00	; 0
 628:	df 4f       	sbci	r29, 0xFF	; 255
 62a:	28 81       	ld	r18, Y
 62c:	39 81       	ldd	r19, Y+1	; 0x01
 62e:	4a 81       	ldd	r20, Y+2	; 0x02
 630:	5b 81       	ldd	r21, Y+3	; 0x03
 632:	0f 2e       	mov	r0, r31
 634:	f9 e8       	ldi	r31, 0x89	; 137
 636:	cf 2e       	mov	r12, r31
 638:	f1 e0       	ldi	r31, 0x01	; 1
 63a:	df 2e       	mov	r13, r31
 63c:	f0 2d       	mov	r31, r0
 63e:	6c e0       	ldi	r22, 0x0C	; 12
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 64a:	68 83       	st	Y, r22
 64c:	79 83       	std	Y+1, r23	; 0x01
 64e:	8a 83       	std	Y+2, r24	; 0x02
 650:	9b 83       	std	Y+3, r25	; 0x03
               break;
 652:	2c c2       	rjmp	.+1112   	; 0xaac <__stack+0x1ad>
            }
            case XOR: /* XOR R16, R17 => op_code = XOR, op1 = R16, op2 = R17 */
            {
               reg[op1] = alu(XOR, reg[op1], reg[op2], &sr);
 654:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 658:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 65c:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 660:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 664:	ee 0f       	add	r30, r30
 666:	ff 1f       	adc	r31, r31
 668:	ee 0f       	add	r30, r30
 66a:	ff 1f       	adc	r31, r31
 66c:	e0 50       	subi	r30, 0x00	; 0
 66e:	ff 4f       	sbci	r31, 0xFF	; 255
 670:	e0 80       	ld	r14, Z
 672:	f1 80       	ldd	r15, Z+1	; 0x01
 674:	02 81       	ldd	r16, Z+2	; 0x02
 676:	13 81       	ldd	r17, Z+3	; 0x03
 678:	cc 0f       	add	r28, r28
 67a:	dd 1f       	adc	r29, r29
 67c:	cc 0f       	add	r28, r28
 67e:	dd 1f       	adc	r29, r29
 680:	c0 50       	subi	r28, 0x00	; 0
 682:	df 4f       	sbci	r29, 0xFF	; 255
 684:	28 81       	ld	r18, Y
 686:	39 81       	ldd	r19, Y+1	; 0x01
 688:	4a 81       	ldd	r20, Y+2	; 0x02
 68a:	5b 81       	ldd	r21, Y+3	; 0x03
 68c:	0f 2e       	mov	r0, r31
 68e:	f9 e8       	ldi	r31, 0x89	; 137
 690:	cf 2e       	mov	r12, r31
 692:	f1 e0       	ldi	r31, 0x01	; 1
 694:	df 2e       	mov	r13, r31
 696:	f0 2d       	mov	r31, r0
 698:	6d e0       	ldi	r22, 0x0D	; 13
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 6a4:	68 83       	st	Y, r22
 6a6:	79 83       	std	Y+1, r23	; 0x01
 6a8:	8a 83       	std	Y+2, r24	; 0x02
 6aa:	9b 83       	std	Y+3, r25	; 0x03
               break;
 6ac:	ff c1       	rjmp	.+1022   	; 0xaac <__stack+0x1ad>
            }
            case ADDI: /* ADDI R16, 100 => op_code = ADDI, op1 = R16, op2 = 100 */
            {
               reg[op1] = alu(ADD, reg[op1], op2, &sr);
 6ae:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 6b2:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 6b6:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <op2>
 6ba:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <op2+0x1>
 6be:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <op2+0x2>
 6c2:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <op2+0x3>
 6c6:	cc 0f       	add	r28, r28
 6c8:	dd 1f       	adc	r29, r29
 6ca:	cc 0f       	add	r28, r28
 6cc:	dd 1f       	adc	r29, r29
 6ce:	c0 50       	subi	r28, 0x00	; 0
 6d0:	df 4f       	sbci	r29, 0xFF	; 255
 6d2:	28 81       	ld	r18, Y
 6d4:	39 81       	ldd	r19, Y+1	; 0x01
 6d6:	4a 81       	ldd	r20, Y+2	; 0x02
 6d8:	5b 81       	ldd	r21, Y+3	; 0x03
 6da:	0f 2e       	mov	r0, r31
 6dc:	f9 e8       	ldi	r31, 0x89	; 137
 6de:	cf 2e       	mov	r12, r31
 6e0:	f1 e0       	ldi	r31, 0x01	; 1
 6e2:	df 2e       	mov	r13, r31
 6e4:	f0 2d       	mov	r31, r0
 6e6:	60 e1       	ldi	r22, 0x10	; 16
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 6f2:	68 83       	st	Y, r22
 6f4:	79 83       	std	Y+1, r23	; 0x01
 6f6:	8a 83       	std	Y+2, r24	; 0x02
 6f8:	9b 83       	std	Y+3, r25	; 0x03
               break;
 6fa:	d8 c1       	rjmp	.+944    	; 0xaac <__stack+0x1ad>
            }
            case SUBI: /* SUBI R16, 50 => op_code = SUBI, op1 = R16, op2 = 50 */
            {
               reg[op1] = alu(SUB, reg[op1], op2, &sr);
 6fc:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 700:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 704:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <op2>
 708:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <op2+0x1>
 70c:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <op2+0x2>
 710:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <op2+0x3>
 714:	cc 0f       	add	r28, r28
 716:	dd 1f       	adc	r29, r29
 718:	cc 0f       	add	r28, r28
 71a:	dd 1f       	adc	r29, r29
 71c:	c0 50       	subi	r28, 0x00	; 0
 71e:	df 4f       	sbci	r29, 0xFF	; 255
 720:	28 81       	ld	r18, Y
 722:	39 81       	ldd	r19, Y+1	; 0x01
 724:	4a 81       	ldd	r20, Y+2	; 0x02
 726:	5b 81       	ldd	r21, Y+3	; 0x03
 728:	0f 2e       	mov	r0, r31
 72a:	f9 e8       	ldi	r31, 0x89	; 137
 72c:	cf 2e       	mov	r12, r31
 72e:	f1 e0       	ldi	r31, 0x01	; 1
 730:	df 2e       	mov	r13, r31
 732:	f0 2d       	mov	r31, r0
 734:	61 e1       	ldi	r22, 0x11	; 17
 736:	70 e0       	ldi	r23, 0x00	; 0
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 740:	68 83       	st	Y, r22
 742:	79 83       	std	Y+1, r23	; 0x01
 744:	8a 83       	std	Y+2, r24	; 0x02
 746:	9b 83       	std	Y+3, r25	; 0x03
               break;
 748:	b1 c1       	rjmp	.+866    	; 0xaac <__stack+0x1ad>
            }
            case ADD: /* ADD R16, R17 => op_code = ADD, op1 = R16, op2 = R17 */
            {
               reg[op1] = alu(ADD, reg[op1], reg[op2], &sr);
 74a:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 74e:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 752:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 756:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	e0 50       	subi	r30, 0x00	; 0
 764:	ff 4f       	sbci	r31, 0xFF	; 255
 766:	e0 80       	ld	r14, Z
 768:	f1 80       	ldd	r15, Z+1	; 0x01
 76a:	02 81       	ldd	r16, Z+2	; 0x02
 76c:	13 81       	ldd	r17, Z+3	; 0x03
 76e:	cc 0f       	add	r28, r28
 770:	dd 1f       	adc	r29, r29
 772:	cc 0f       	add	r28, r28
 774:	dd 1f       	adc	r29, r29
 776:	c0 50       	subi	r28, 0x00	; 0
 778:	df 4f       	sbci	r29, 0xFF	; 255
 77a:	28 81       	ld	r18, Y
 77c:	39 81       	ldd	r19, Y+1	; 0x01
 77e:	4a 81       	ldd	r20, Y+2	; 0x02
 780:	5b 81       	ldd	r21, Y+3	; 0x03
 782:	0f 2e       	mov	r0, r31
 784:	f9 e8       	ldi	r31, 0x89	; 137
 786:	cf 2e       	mov	r12, r31
 788:	f1 e0       	ldi	r31, 0x01	; 1
 78a:	df 2e       	mov	r13, r31
 78c:	f0 2d       	mov	r31, r0
 78e:	60 e1       	ldi	r22, 0x10	; 16
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 79a:	68 83       	st	Y, r22
 79c:	79 83       	std	Y+1, r23	; 0x01
 79e:	8a 83       	std	Y+2, r24	; 0x02
 7a0:	9b 83       	std	Y+3, r25	; 0x03
               break;
 7a2:	84 c1       	rjmp	.+776    	; 0xaac <__stack+0x1ad>
            }
            case SUB: /* SUB R16, R17 => op_code = SUB, op1 = R16, op2 = R17 */
            {
               reg[op1] = alu(SUB, reg[op1], reg[op2], &sr);
 7a4:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 7a8:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 7ac:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 7b0:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	ee 0f       	add	r30, r30
 7ba:	ff 1f       	adc	r31, r31
 7bc:	e0 50       	subi	r30, 0x00	; 0
 7be:	ff 4f       	sbci	r31, 0xFF	; 255
 7c0:	e0 80       	ld	r14, Z
 7c2:	f1 80       	ldd	r15, Z+1	; 0x01
 7c4:	02 81       	ldd	r16, Z+2	; 0x02
 7c6:	13 81       	ldd	r17, Z+3	; 0x03
 7c8:	cc 0f       	add	r28, r28
 7ca:	dd 1f       	adc	r29, r29
 7cc:	cc 0f       	add	r28, r28
 7ce:	dd 1f       	adc	r29, r29
 7d0:	c0 50       	subi	r28, 0x00	; 0
 7d2:	df 4f       	sbci	r29, 0xFF	; 255
 7d4:	28 81       	ld	r18, Y
 7d6:	39 81       	ldd	r19, Y+1	; 0x01
 7d8:	4a 81       	ldd	r20, Y+2	; 0x02
 7da:	5b 81       	ldd	r21, Y+3	; 0x03
 7dc:	0f 2e       	mov	r0, r31
 7de:	f9 e8       	ldi	r31, 0x89	; 137
 7e0:	cf 2e       	mov	r12, r31
 7e2:	f1 e0       	ldi	r31, 0x01	; 1
 7e4:	df 2e       	mov	r13, r31
 7e6:	f0 2d       	mov	r31, r0
 7e8:	61 e1       	ldi	r22, 0x11	; 17
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 7f4:	68 83       	st	Y, r22
 7f6:	79 83       	std	Y+1, r23	; 0x01
 7f8:	8a 83       	std	Y+2, r24	; 0x02
 7fa:	9b 83       	std	Y+3, r25	; 0x03
               break;
 7fc:	57 c1       	rjmp	.+686    	; 0xaac <__stack+0x1ad>
            }
            case INC: /* INC R16 => op_code = INC, op1 = R16 */
            {
               reg[op1] = alu(ADD, reg[op1], 1, &sr);
 7fe:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 802:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 806:	cc 0f       	add	r28, r28
 808:	dd 1f       	adc	r29, r29
 80a:	cc 0f       	add	r28, r28
 80c:	dd 1f       	adc	r29, r29
 80e:	c0 50       	subi	r28, 0x00	; 0
 810:	df 4f       	sbci	r29, 0xFF	; 255
 812:	28 81       	ld	r18, Y
 814:	39 81       	ldd	r19, Y+1	; 0x01
 816:	4a 81       	ldd	r20, Y+2	; 0x02
 818:	5b 81       	ldd	r21, Y+3	; 0x03
 81a:	0f 2e       	mov	r0, r31
 81c:	f9 e8       	ldi	r31, 0x89	; 137
 81e:	cf 2e       	mov	r12, r31
 820:	f1 e0       	ldi	r31, 0x01	; 1
 822:	df 2e       	mov	r13, r31
 824:	f0 2d       	mov	r31, r0
 826:	e1 2c       	mov	r14, r1
 828:	f1 2c       	mov	r15, r1
 82a:	87 01       	movw	r16, r14
 82c:	e3 94       	inc	r14
 82e:	60 e1       	ldi	r22, 0x10	; 16
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 83a:	68 83       	st	Y, r22
 83c:	79 83       	std	Y+1, r23	; 0x01
 83e:	8a 83       	std	Y+2, r24	; 0x02
 840:	9b 83       	std	Y+3, r25	; 0x03
               break;
 842:	34 c1       	rjmp	.+616    	; 0xaac <__stack+0x1ad>
            }
            case DEC: /* DEC R16 => op_code = DEC, op1 = R16 */
            {
               reg[op1] = alu(SUB, reg[op1], 1, &sr);
 844:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 848:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 84c:	cc 0f       	add	r28, r28
 84e:	dd 1f       	adc	r29, r29
 850:	cc 0f       	add	r28, r28
 852:	dd 1f       	adc	r29, r29
 854:	c0 50       	subi	r28, 0x00	; 0
 856:	df 4f       	sbci	r29, 0xFF	; 255
 858:	28 81       	ld	r18, Y
 85a:	39 81       	ldd	r19, Y+1	; 0x01
 85c:	4a 81       	ldd	r20, Y+2	; 0x02
 85e:	5b 81       	ldd	r21, Y+3	; 0x03
 860:	0f 2e       	mov	r0, r31
 862:	f9 e8       	ldi	r31, 0x89	; 137
 864:	cf 2e       	mov	r12, r31
 866:	f1 e0       	ldi	r31, 0x01	; 1
 868:	df 2e       	mov	r13, r31
 86a:	f0 2d       	mov	r31, r0
 86c:	e1 2c       	mov	r14, r1
 86e:	f1 2c       	mov	r15, r1
 870:	87 01       	movw	r16, r14
 872:	e3 94       	inc	r14
 874:	61 e1       	ldi	r22, 0x11	; 17
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	80 e0       	ldi	r24, 0x00	; 0
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
 880:	68 83       	st	Y, r22
 882:	79 83       	std	Y+1, r23	; 0x01
 884:	8a 83       	std	Y+2, r24	; 0x02
 886:	9b 83       	std	Y+3, r25	; 0x03
               break;
 888:	11 c1       	rjmp	.+546    	; 0xaac <__stack+0x1ad>
            }
            case CPI: /* CPI R16, 5 => op_code = CPI, op1 = R16, op2 = 5 */
            {
               (void)alu(SUB, reg[op1], op2, &sr);
 88a:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 88e:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 892:	ee 0f       	add	r30, r30
 894:	ff 1f       	adc	r31, r31
 896:	ee 0f       	add	r30, r30
 898:	ff 1f       	adc	r31, r31
 89a:	e0 50       	subi	r30, 0x00	; 0
 89c:	ff 4f       	sbci	r31, 0xFF	; 255
 89e:	20 81       	ld	r18, Z
 8a0:	31 81       	ldd	r19, Z+1	; 0x01
 8a2:	42 81       	ldd	r20, Z+2	; 0x02
 8a4:	53 81       	ldd	r21, Z+3	; 0x03
 8a6:	e0 90 81 01 	lds	r14, 0x0181	; 0x800181 <op2>
 8aa:	f0 90 82 01 	lds	r15, 0x0182	; 0x800182 <op2+0x1>
 8ae:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <op2+0x2>
 8b2:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <op2+0x3>
 8b6:	0f 2e       	mov	r0, r31
 8b8:	f9 e8       	ldi	r31, 0x89	; 137
 8ba:	cf 2e       	mov	r12, r31
 8bc:	f1 e0       	ldi	r31, 0x01	; 1
 8be:	df 2e       	mov	r13, r31
 8c0:	f0 2d       	mov	r31, r0
 8c2:	61 e1       	ldi	r22, 0x11	; 17
 8c4:	70 e0       	ldi	r23, 0x00	; 0
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
               break;
 8ce:	ee c0       	rjmp	.+476    	; 0xaac <__stack+0x1ad>
            }
            case CP: /* CP R16, R17 => op_code = CP, op1 = R16, op2 = R17 */
            {
               (void)alu(SUB, reg[op1], reg[op2], &sr);
 8d0:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <op2>
 8d4:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <op2+0x1>
 8d8:	ee 0f       	add	r30, r30
 8da:	ff 1f       	adc	r31, r31
 8dc:	ee 0f       	add	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	e0 50       	subi	r30, 0x00	; 0
 8e2:	ff 4f       	sbci	r31, 0xFF	; 255
 8e4:	e0 80       	ld	r14, Z
 8e6:	f1 80       	ldd	r15, Z+1	; 0x01
 8e8:	02 81       	ldd	r16, Z+2	; 0x02
 8ea:	13 81       	ldd	r17, Z+3	; 0x03
 8ec:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 8f0:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 8f4:	ee 0f       	add	r30, r30
 8f6:	ff 1f       	adc	r31, r31
 8f8:	ee 0f       	add	r30, r30
 8fa:	ff 1f       	adc	r31, r31
 8fc:	e0 50       	subi	r30, 0x00	; 0
 8fe:	ff 4f       	sbci	r31, 0xFF	; 255
 900:	20 81       	ld	r18, Z
 902:	31 81       	ldd	r19, Z+1	; 0x01
 904:	42 81       	ldd	r20, Z+2	; 0x02
 906:	53 81       	ldd	r21, Z+3	; 0x03
 908:	0f 2e       	mov	r0, r31
 90a:	f9 e8       	ldi	r31, 0x89	; 137
 90c:	cf 2e       	mov	r12, r31
 90e:	f1 e0       	ldi	r31, 0x01	; 1
 910:	df 2e       	mov	r13, r31
 912:	f0 2d       	mov	r31, r0
 914:	61 e1       	ldi	r22, 0x11	; 17
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 6c 00 	call	0xd8	; 0xd8 <alu>
               break;
 920:	c5 c0       	rjmp	.+394    	; 0xaac <__stack+0x1ad>
            }
            case CALL: /* CALL setup => op_code = CALL, op1 = setup */
            {
               stack_push(pc); /* Stores the return address on the stack. */
 922:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <pc>
 926:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <pc+0x1>
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e 94 8b 06 	call	0xd16	; 0xd16 <stack_push>
               pc = op1;       /* Jumps to specified address. */
 932:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 936:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 93a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 93e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
               break;
 942:	b4 c0       	rjmp	.+360    	; 0xaac <__stack+0x1ad>
            }
            case RET: /* RET => op_code = RET */
            {
               /* Pops the return address from the stack and assigns to the program counter. */
               pc = stack_pop();
 944:	0e 94 bf 06 	call	0xd7e	; 0xd7e <stack_pop>
 948:	70 93 8b 01 	sts	0x018B, r23	; 0x80018b <pc+0x1>
 94c:	60 93 8a 01 	sts	0x018A, r22	; 0x80018a <pc>
               break;
 950:	ad c0       	rjmp	.+346    	; 0xaac <__stack+0x1ad>
            }
            case PUSH: /* PUSH R24 => op_code = PUSH, op1 = R24 */
            {
               /* Pushes content of a CPU register to the stack. */
               stack_push(reg[op1]);
 952:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 956:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 95a:	ee 0f       	add	r30, r30
 95c:	ff 1f       	adc	r31, r31
 95e:	ee 0f       	add	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	e0 50       	subi	r30, 0x00	; 0
 964:	ff 4f       	sbci	r31, 0xFF	; 255
 966:	60 81       	ld	r22, Z
 968:	71 81       	ldd	r23, Z+1	; 0x01
 96a:	82 81       	ldd	r24, Z+2	; 0x02
 96c:	93 81       	ldd	r25, Z+3	; 0x03
 96e:	0e 94 8b 06 	call	0xd16	; 0xd16 <stack_push>
               break;
 972:	9c c0       	rjmp	.+312    	; 0xaac <__stack+0x1ad>
            }
            case POP: /* POP R24 => op_code = POP, op1 = R24 */
            {
               /* Pops content from the stack to a CPU register. */
               reg[op1] = stack_pop();
 974:	c0 91 85 01 	lds	r28, 0x0185	; 0x800185 <op1>
 978:	d0 91 86 01 	lds	r29, 0x0186	; 0x800186 <op1+0x1>
 97c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <stack_pop>
 980:	cc 0f       	add	r28, r28
 982:	dd 1f       	adc	r29, r29
 984:	cc 0f       	add	r28, r28
 986:	dd 1f       	adc	r29, r29
 988:	c0 50       	subi	r28, 0x00	; 0
 98a:	df 4f       	sbci	r29, 0xFF	; 255
 98c:	68 83       	st	Y, r22
 98e:	79 83       	std	Y+1, r23	; 0x01
 990:	8a 83       	std	Y+2, r24	; 0x02
 992:	9b 83       	std	Y+3, r25	; 0x03
               break;
 994:	8b c0       	rjmp	.+278    	; 0xaac <__stack+0x1ad>
            }
            case JMP: /* JMP 0x05 => op_code = JMP, op1 = 0x05 */
            {
               pc = op1; /* Jumps to specified address. */
 996:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 99a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 99e:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 9a2:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
               break;
 9a6:	82 c0       	rjmp	.+260    	; 0xaac <__stack+0x1ad>
            }
            case BREQ: /* BREQ 0x20 => op_code = BREQ, op1 = 0x20 */
            {
               if (read(sr, Z)) pc = op1; /* Equal to 0 => Z = 1. */
 9a8:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sr>
 9ac:	82 ff       	sbrs	r24, 2
 9ae:	7e c0       	rjmp	.+252    	; 0xaac <__stack+0x1ad>
 9b0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 9b4:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 9b8:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 9bc:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
 9c0:	75 c0       	rjmp	.+234    	; 0xaac <__stack+0x1ad>
               break;
            }
            case BRNE: /* BRNE 0x20 => op_code = BRNE, op1 = 0x20 */
            {
               if (!read(sr, Z)) pc = op1; /* Not equal to 0 => Z = 0. */
 9c2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sr>
 9c6:	82 fd       	sbrc	r24, 2
 9c8:	71 c0       	rjmp	.+226    	; 0xaac <__stack+0x1ad>
 9ca:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 9ce:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 9d2:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 9d6:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
 9da:	68 c0       	rjmp	.+208    	; 0xaac <__stack+0x1ad>
               break;
            }
            case BRGE: /* BRGE 0x20 => op_code = BRGE, op1 = 0x20 */
            {
               if (!read(sr, S)) pc = op1; // R >= 0 => S = 0.
 9dc:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sr>
 9e0:	84 fd       	sbrc	r24, 4
 9e2:	64 c0       	rjmp	.+200    	; 0xaac <__stack+0x1ad>
 9e4:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 9e8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 9ec:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 9f0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
 9f4:	5b c0       	rjmp	.+182    	; 0xaac <__stack+0x1ad>
               break;
            }
            case BRGT: /* BRGT 0x20 => op_code = BRLE, op1 = 0x20 */
            {
               if (!read(sr, S) && !read(sr, Z)) pc = op1; /* R > 0 if S = 0 and Z = 0. */
 9f6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sr>
 9fa:	84 fd       	sbrc	r24, 4
 9fc:	57 c0       	rjmp	.+174    	; 0xaac <__stack+0x1ad>
 9fe:	82 fd       	sbrc	r24, 2
 a00:	55 c0       	rjmp	.+170    	; 0xaac <__stack+0x1ad>
 a02:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 a06:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 a0a:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 a0e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
 a12:	4c c0       	rjmp	.+152    	; 0xaac <__stack+0x1ad>
               break;
            }
            case BRLE: /* BRLE 0x20 => op_code = BRLE, op1 = 0x20 */
            {
               if (read(sr, S) || read(sr, Z)) pc = op1; /* R <= 0 => S = 1 or Z = 1. */
 a14:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sr>
 a18:	84 fd       	sbrc	r24, 4
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__stack+0x121>
 a1c:	82 ff       	sbrs	r24, 2
 a1e:	46 c0       	rjmp	.+140    	; 0xaac <__stack+0x1ad>
 a20:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 a24:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 a28:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 a2c:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
 a30:	3d c0       	rjmp	.+122    	; 0xaac <__stack+0x1ad>
               break;
            }
            case BRLT: /* BRLT 0x20 => op_code = BRLT, op1 = 0x20 */
            {
               if (read(sr, S)) pc = op1; /* R < 0 if S = 1. */
 a32:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <sr>
 a36:	84 ff       	sbrs	r24, 4
 a38:	39 c0       	rjmp	.+114    	; 0xaac <__stack+0x1ad>
 a3a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op1>
 a3e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op1+0x1>
 a42:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <pc+0x1>
 a46:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <pc>
 a4a:	30 c0       	rjmp	.+96     	; 0xaac <__stack+0x1ad>
               break;
            }
            case LSL: /* LSL R16 => op_code = LSL, op1 = R16 */
            {
               reg[op1] = reg[op1] << 1; /* Shifts content of CPU register one step to the left. */
 a4c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 a50:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 a54:	ee 0f       	add	r30, r30
 a56:	ff 1f       	adc	r31, r31
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	e0 50       	subi	r30, 0x00	; 0
 a5e:	ff 4f       	sbci	r31, 0xFF	; 255
 a60:	80 81       	ld	r24, Z
 a62:	91 81       	ldd	r25, Z+1	; 0x01
 a64:	a2 81       	ldd	r26, Z+2	; 0x02
 a66:	b3 81       	ldd	r27, Z+3	; 0x03
 a68:	88 0f       	add	r24, r24
 a6a:	99 1f       	adc	r25, r25
 a6c:	aa 1f       	adc	r26, r26
 a6e:	bb 1f       	adc	r27, r27
 a70:	80 83       	st	Z, r24
 a72:	91 83       	std	Z+1, r25	; 0x01
 a74:	a2 83       	std	Z+2, r26	; 0x02
 a76:	b3 83       	std	Z+3, r27	; 0x03
               break;
 a78:	19 c0       	rjmp	.+50     	; 0xaac <__stack+0x1ad>
            }
            case LSR: /* LSR R1R => op_code = LSR, op1 = R16 */
            {
               reg[op1] = reg[op1] >> 1; /* Shifts content of CPU register one step to the right. */
 a7a:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op1>
 a7e:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op1+0x1>
 a82:	ee 0f       	add	r30, r30
 a84:	ff 1f       	adc	r31, r31
 a86:	ee 0f       	add	r30, r30
 a88:	ff 1f       	adc	r31, r31
 a8a:	e0 50       	subi	r30, 0x00	; 0
 a8c:	ff 4f       	sbci	r31, 0xFF	; 255
 a8e:	80 81       	ld	r24, Z
 a90:	91 81       	ldd	r25, Z+1	; 0x01
 a92:	a2 81       	ldd	r26, Z+2	; 0x02
 a94:	b3 81       	ldd	r27, Z+3	; 0x03
 a96:	b6 95       	lsr	r27
 a98:	a7 95       	ror	r26
 a9a:	97 95       	ror	r25
 a9c:	87 95       	ror	r24
 a9e:	80 83       	st	Z, r24
 aa0:	91 83       	std	Z+1, r25	; 0x01
 aa2:	a2 83       	std	Z+2, r26	; 0x02
 aa4:	b3 83       	std	Z+3, r27	; 0x03
               break;
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <__stack+0x1ad>
            }
            default:
            {
               control_unit_reset(); /* System reset if error occurs. */
 aa8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <control_unit_reset>
               break;
            }
         }

         state = CPU_STATE_FETCH; /* Fetches next instruction during next clock cycle. */
 aac:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <state>
         break;
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__stack+0x1b7>
      }
      default: /* System reset if error occurs. */
      {
         control_unit_reset();
 ab2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <control_unit_reset>
         break;
      }
   }
   return;
}
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	ff 90       	pop	r15
 ac0:	ef 90       	pop	r14
 ac2:	df 90       	pop	r13
 ac4:	cf 90       	pop	r12
 ac6:	08 95       	ret

00000ac8 <data_memory_reset>:
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
   for (uint16_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
 ac8:	80 e0       	ldi	r24, 0x00	; 0
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0c c0       	rjmp	.+24     	; 0xae6 <data_memory_reset+0x1e>
   {
      data[i] = 0x00;
 ace:	fc 01       	movw	r30, r24
 ad0:	ee 0f       	add	r30, r30
 ad2:	ff 1f       	adc	r31, r31
 ad4:	ee 0f       	add	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	ec 56       	subi	r30, 0x6C	; 108
 ada:	fe 4f       	sbci	r31, 0xFE	; 254
 adc:	10 82       	st	Z, r1
 ade:	11 82       	std	Z+1, r1	; 0x01
 ae0:	12 82       	std	Z+2, r1	; 0x02
 ae2:	13 82       	std	Z+3, r1	; 0x03
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
   for (uint16_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
 ae4:	01 96       	adiw	r24, 0x01	; 1
 ae6:	84 36       	cpi	r24, 0x64	; 100
 ae8:	91 05       	cpc	r25, r1
 aea:	88 f3       	brcs	.-30     	; 0xace <data_memory_reset+0x6>
   {
      data[i] = 0x00;
   }
   return;
}
 aec:	08 95       	ret

00000aee <data_memory_write>:
*                    - value  : The 8-bit value to write to data memory.
********************************************************************************/
int data_memory_write(const uint16_t address,
                      const uint32_t value)
{
   if (address < DATA_MEMORY_ADDRESS_WIDTH)
 aee:	84 36       	cpi	r24, 0x64	; 100
 af0:	91 05       	cpc	r25, r1
 af2:	70 f4       	brcc	.+28     	; 0xb10 <data_memory_write+0x22>
   {
      data[address] = value;
 af4:	88 0f       	add	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	fc 01       	movw	r30, r24
 afe:	ec 56       	subi	r30, 0x6C	; 108
 b00:	fe 4f       	sbci	r31, 0xFE	; 254
 b02:	40 83       	st	Z, r20
 b04:	51 83       	std	Z+1, r21	; 0x01
 b06:	62 83       	std	Z+2, r22	; 0x02
 b08:	73 83       	std	Z+3, r23	; 0x03
      return 0;
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	08 95       	ret
   }
   else
   {
      return 1;
 b10:	81 e0       	ldi	r24, 0x01	; 1
 b12:	90 e0       	ldi	r25, 0x00	; 0
   }
}
 b14:	08 95       	ret

00000b16 <data_memory_read>:
*
*                   - address: Read location in data memory.
********************************************************************************/
uint8_t data_memory_read(const uint16_t address)
{
   if (address < DATA_MEMORY_ADDRESS_WIDTH)
 b16:	84 36       	cpi	r24, 0x64	; 100
 b18:	91 05       	cpc	r25, r1
 b1a:	48 f4       	brcc	.+18     	; 0xb2e <data_memory_read+0x18>
   {
      return data[address];
 b1c:	88 0f       	add	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	88 0f       	add	r24, r24
 b22:	99 1f       	adc	r25, r25
 b24:	fc 01       	movw	r30, r24
 b26:	ec 56       	subi	r30, 0x6C	; 108
 b28:	fe 4f       	sbci	r31, 0xFE	; 254
 b2a:	80 81       	ld	r24, Z
 b2c:	08 95       	ret
   }
   else
   {
      return 0x00;
 b2e:	80 e0       	ldi	r24, 0x00	; 0
   }
 b30:	08 95       	ret

00000b32 <main>:
/********************************************************************************
* main: Controls the program flow of an 8-bit processor by keyboard input.
********************************************************************************/
int main(void)
{
	control_unit_reset();
 b32:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <control_unit_reset>
	
	while (1)
	{
		control_unit_run_next_state();
 b36:	0e 94 41 01 	call	0x282	; 0x282 <control_unit_run_next_state>
 b3a:	fd cf       	rjmp	.-6      	; 0xb36 <main+0x4>

00000b3c <program_memory_write>:
*                       should be called once when the program starts.
********************************************************************************/
void program_memory_write(void)
{
   static bool program_memory_initialized = false;
   if (program_memory_initialized) return;
 b3c:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <program_memory_initialized.1977>
 b40:	81 11       	cpse	r24, r1
 b42:	ae c0       	rjmp	.+348    	; 0xca0 <program_memory_write+0x164>

   /********************************************************************************
   * RESET_vect: Reset vector and start address for the program. A jump is made
   *             to the main subroutine in order to start the program.
   ********************************************************************************/
   data[0] = assemble(JMP, main, 0x00); /* JMP main */
 b44:	e5 e2       	ldi	r30, 0x25	; 37
 b46:	f3 e0       	ldi	r31, 0x03	; 3
 b48:	10 82       	st	Z, r1
 b4a:	11 82       	std	Z+1, r1	; 0x01
 b4c:	12 82       	std	Z+2, r1	; 0x02
 b4e:	13 82       	std	Z+3, r1	; 0x03
 b50:	14 82       	std	Z+4, r1	; 0x04
 b52:	15 82       	std	Z+5, r1	; 0x05
 b54:	16 82       	std	Z+6, r1	; 0x06
 b56:	17 82       	std	Z+7, r1	; 0x07
   /*********************************************************************************
   * main: Initiates the I / O ports at start.The program is running as long as
   *       voltage is supplied.BUTTON1 is continuously polled.When BUTTON1
   *       is pressed, LED1 is enabled, otherwise it's disabled.
   *********************************************************************************/
   data[1] = assemble(CALL, setup, 0x00);         /* CALL setup */
 b58:	10 86       	std	Z+8, r1	; 0x08
 b5a:	11 86       	std	Z+9, r1	; 0x09
 b5c:	12 86       	std	Z+10, r1	; 0x0a
 b5e:	13 86       	std	Z+11, r1	; 0x0b
 b60:	14 86       	std	Z+12, r1	; 0x0c
 b62:	15 86       	std	Z+13, r1	; 0x0d
 b64:	16 86       	std	Z+14, r1	; 0x0e
 b66:	17 86       	std	Z+15, r1	; 0x0f
   data[2] = assemble(IN, R16, PINA);             /* IN R16, PINB */
 b68:	82 e0       	ldi	r24, 0x02	; 2
 b6a:	80 8b       	std	Z+16, r24	; 0x10
 b6c:	11 8a       	std	Z+17, r1	; 0x11
 b6e:	12 8a       	std	Z+18, r1	; 0x12
 b70:	13 8a       	std	Z+19, r1	; 0x13
 b72:	14 8a       	std	Z+20, r1	; 0x14
 b74:	15 8a       	std	Z+21, r1	; 0x15
 b76:	16 8a       	std	Z+22, r1	; 0x16
 b78:	17 8a       	std	Z+23, r1	; 0x17
   data[3] = assemble(ANDI, R16, (1 << BUTTON1)); /* ANDI R16, (1 << BUTTON1) */
 b7a:	20 e2       	ldi	r18, 0x20	; 32
 b7c:	20 8f       	std	Z+24, r18	; 0x18
 b7e:	11 8e       	std	Z+25, r1	; 0x19
 b80:	12 8e       	std	Z+26, r1	; 0x1a
 b82:	13 8e       	std	Z+27, r1	; 0x1b
 b84:	14 8e       	std	Z+28, r1	; 0x1c
 b86:	15 8e       	std	Z+29, r1	; 0x1d
 b88:	16 8e       	std	Z+30, r1	; 0x1e
 b8a:	17 8e       	std	Z+31, r1	; 0x1f
   data[4] = assemble(BRNE, led1_on, 0x00);       /* BRNE led1_on */
 b8c:	10 a2       	std	Z+32, r1	; 0x20
 b8e:	11 a2       	std	Z+33, r1	; 0x21
 b90:	12 a2       	std	Z+34, r1	; 0x22
 b92:	13 a2       	std	Z+35, r1	; 0x23
 b94:	14 a2       	std	Z+36, r1	; 0x24
 b96:	15 a2       	std	Z+37, r1	; 0x25
 b98:	16 a2       	std	Z+38, r1	; 0x26
 b9a:	17 a2       	std	Z+39, r1	; 0x27

   /********************************************************************************
   * led1_off: Disables LED1.
   *********************************************************************************/
   data[5] = assemble(IN, R16, PORTA);          /* IN R16, PORTB */
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	80 a7       	std	Z+40, r24	; 0x28
 ba0:	11 a6       	std	Z+41, r1	; 0x29
 ba2:	12 a6       	std	Z+42, r1	; 0x2a
 ba4:	13 a6       	std	Z+43, r1	; 0x2b
 ba6:	14 a6       	std	Z+44, r1	; 0x2c
 ba8:	15 a6       	std	Z+45, r1	; 0x2d
 baa:	16 a6       	std	Z+46, r1	; 0x2e
 bac:	17 a6       	std	Z+47, r1	; 0x2f
   data[6] = assemble(ANDI, R16, ~(1 << LED1)); /* ANDI R16, ~(1 << LED1) */
 bae:	9e ef       	ldi	r25, 0xFE	; 254
 bb0:	90 ab       	std	Z+48, r25	; 0x30
 bb2:	9f ef       	ldi	r25, 0xFF	; 255
 bb4:	91 ab       	std	Z+49, r25	; 0x31
 bb6:	92 ab       	std	Z+50, r25	; 0x32
 bb8:	93 ab       	std	Z+51, r25	; 0x33
 bba:	14 aa       	std	Z+52, r1	; 0x34
 bbc:	15 aa       	std	Z+53, r1	; 0x35
 bbe:	16 aa       	std	Z+54, r1	; 0x36
 bc0:	17 aa       	std	Z+55, r1	; 0x37
   data[7] = assemble(OUT, PORTA, R16);         /* OUT PORTB, R16 */
 bc2:	90 e1       	ldi	r25, 0x10	; 16
 bc4:	90 af       	std	Z+56, r25	; 0x38
 bc6:	11 ae       	std	Z+57, r1	; 0x39
 bc8:	12 ae       	std	Z+58, r1	; 0x3a
 bca:	13 ae       	std	Z+59, r1	; 0x3b
 bcc:	14 ae       	std	Z+60, r1	; 0x3c
 bce:	15 ae       	std	Z+61, r1	; 0x3d
 bd0:	16 ae       	std	Z+62, r1	; 0x3e
 bd2:	17 ae       	std	Z+63, r1	; 0x3f
   data[8] = assemble(JMP, main_loop, 0x00);    /* JMP main_loop */
 bd4:	e5 e6       	ldi	r30, 0x65	; 101
 bd6:	f3 e0       	ldi	r31, 0x03	; 3
 bd8:	10 82       	st	Z, r1
 bda:	11 82       	std	Z+1, r1	; 0x01
 bdc:	12 82       	std	Z+2, r1	; 0x02
 bde:	13 82       	std	Z+3, r1	; 0x03
 be0:	14 82       	std	Z+4, r1	; 0x04
 be2:	15 82       	std	Z+5, r1	; 0x05
 be4:	16 82       	std	Z+6, r1	; 0x06
 be6:	17 82       	std	Z+7, r1	; 0x07

   /********************************************************************************
   * led1_on: Enables LED1.
   *********************************************************************************/
   data[9]  = assemble(IN, R16, PORTA);        /* IN R16, PORTB */
 be8:	ed e6       	ldi	r30, 0x6D	; 109
 bea:	f3 e0       	ldi	r31, 0x03	; 3
 bec:	80 83       	st	Z, r24
 bee:	11 82       	std	Z+1, r1	; 0x01
 bf0:	12 82       	std	Z+2, r1	; 0x02
 bf2:	13 82       	std	Z+3, r1	; 0x03
 bf4:	14 82       	std	Z+4, r1	; 0x04
 bf6:	15 82       	std	Z+5, r1	; 0x05
 bf8:	16 82       	std	Z+6, r1	; 0x06
 bfa:	17 82       	std	Z+7, r1	; 0x07
   data[10] = assemble(ORI, R16, (1 << LED1)); /* ORI R16, (1 << LED1) */
 bfc:	e5 e7       	ldi	r30, 0x75	; 117
 bfe:	f3 e0       	ldi	r31, 0x03	; 3
 c00:	80 83       	st	Z, r24
 c02:	11 82       	std	Z+1, r1	; 0x01
 c04:	12 82       	std	Z+2, r1	; 0x02
 c06:	13 82       	std	Z+3, r1	; 0x03
 c08:	14 82       	std	Z+4, r1	; 0x04
 c0a:	15 82       	std	Z+5, r1	; 0x05
 c0c:	16 82       	std	Z+6, r1	; 0x06
 c0e:	17 82       	std	Z+7, r1	; 0x07
   data[11] = assemble(OUT, PORTA, R16);       /* OUT PORTB, R16 */
 c10:	ed e7       	ldi	r30, 0x7D	; 125
 c12:	f3 e0       	ldi	r31, 0x03	; 3
 c14:	90 83       	st	Z, r25
 c16:	11 82       	std	Z+1, r1	; 0x01
 c18:	12 82       	std	Z+2, r1	; 0x02
 c1a:	13 82       	std	Z+3, r1	; 0x03
 c1c:	14 82       	std	Z+4, r1	; 0x04
 c1e:	15 82       	std	Z+5, r1	; 0x05
 c20:	16 82       	std	Z+6, r1	; 0x06
 c22:	17 82       	std	Z+7, r1	; 0x07
   data[12] = assemble(JMP, main_loop, 0x00);  /* JMP main_loop */
 c24:	e5 e8       	ldi	r30, 0x85	; 133
 c26:	f3 e0       	ldi	r31, 0x03	; 3
 c28:	10 82       	st	Z, r1
 c2a:	11 82       	std	Z+1, r1	; 0x01
 c2c:	12 82       	std	Z+2, r1	; 0x02
 c2e:	13 82       	std	Z+3, r1	; 0x03
 c30:	14 82       	std	Z+4, r1	; 0x04
 c32:	15 82       	std	Z+5, r1	; 0x05
 c34:	16 82       	std	Z+6, r1	; 0x06
 c36:	17 82       	std	Z+7, r1	; 0x07
   /********************************************************************************
   * setup: Sets the pin connected to LED1 to outputand enables the internal
   *        pull - up resistor for the pin connected to BUTTON1 so that the input
   *        signal always reads as high(1) or low(0).
   ********************************************************************************/
   data[13] = assemble(LDI, R16, (1 << LED1));    /* LDI R16, (1 << LED1) */
 c38:	ed e8       	ldi	r30, 0x8D	; 141
 c3a:	f3 e0       	ldi	r31, 0x03	; 3
 c3c:	80 83       	st	Z, r24
 c3e:	11 82       	std	Z+1, r1	; 0x01
 c40:	12 82       	std	Z+2, r1	; 0x02
 c42:	13 82       	std	Z+3, r1	; 0x03
 c44:	14 82       	std	Z+4, r1	; 0x04
 c46:	15 82       	std	Z+5, r1	; 0x05
 c48:	16 82       	std	Z+6, r1	; 0x06
 c4a:	17 82       	std	Z+7, r1	; 0x07
   data[14] = assemble(OUT, DDRA, R16);           /* OUT DDRB, R16 */
 c4c:	e5 e9       	ldi	r30, 0x95	; 149
 c4e:	f3 e0       	ldi	r31, 0x03	; 3
 c50:	90 83       	st	Z, r25
 c52:	11 82       	std	Z+1, r1	; 0x01
 c54:	12 82       	std	Z+2, r1	; 0x02
 c56:	13 82       	std	Z+3, r1	; 0x03
 c58:	14 82       	std	Z+4, r1	; 0x04
 c5a:	15 82       	std	Z+5, r1	; 0x05
 c5c:	16 82       	std	Z+6, r1	; 0x06
 c5e:	17 82       	std	Z+7, r1	; 0x07
   data[15] = assemble(LDI, R16, (1 << BUTTON1)); /* LDI R16, (1 << BUTTON1) */
 c60:	ed e9       	ldi	r30, 0x9D	; 157
 c62:	f3 e0       	ldi	r31, 0x03	; 3
 c64:	20 83       	st	Z, r18
 c66:	11 82       	std	Z+1, r1	; 0x01
 c68:	12 82       	std	Z+2, r1	; 0x02
 c6a:	13 82       	std	Z+3, r1	; 0x03
 c6c:	14 82       	std	Z+4, r1	; 0x04
 c6e:	15 82       	std	Z+5, r1	; 0x05
 c70:	16 82       	std	Z+6, r1	; 0x06
 c72:	17 82       	std	Z+7, r1	; 0x07
   data[16] = assemble(OUT, PORTA, R16);          /* OUT PORTB, R16 */
 c74:	e5 ea       	ldi	r30, 0xA5	; 165
 c76:	f3 e0       	ldi	r31, 0x03	; 3
 c78:	90 83       	st	Z, r25
 c7a:	11 82       	std	Z+1, r1	; 0x01
 c7c:	12 82       	std	Z+2, r1	; 0x02
 c7e:	13 82       	std	Z+3, r1	; 0x03
 c80:	14 82       	std	Z+4, r1	; 0x04
 c82:	15 82       	std	Z+5, r1	; 0x05
 c84:	16 82       	std	Z+6, r1	; 0x06
 c86:	17 82       	std	Z+7, r1	; 0x07
   data[17] = assemble(RET, 0x00, 0x00);          /* RET */
 c88:	ed ea       	ldi	r30, 0xAD	; 173
 c8a:	f3 e0       	ldi	r31, 0x03	; 3
 c8c:	10 82       	st	Z, r1
 c8e:	11 82       	std	Z+1, r1	; 0x01
 c90:	12 82       	std	Z+2, r1	; 0x02
 c92:	13 82       	std	Z+3, r1	; 0x03
 c94:	14 82       	std	Z+4, r1	; 0x04
 c96:	15 82       	std	Z+5, r1	; 0x05
 c98:	16 82       	std	Z+6, r1	; 0x06
 c9a:	17 82       	std	Z+7, r1	; 0x07

   program_memory_initialized = true;
 c9c:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <program_memory_initialized.1977>
 ca0:	08 95       	ret

00000ca2 <program_memory_read>:
*
*                      - address: Address to instruction in program memory.
********************************************************************************/
uint64_t program_memory_read(const uint16_t address)
{
   if (address < PROGRAM_MEMORY_ADDRESS_WIDTH)
 ca2:	89 31       	cpi	r24, 0x19	; 25
 ca4:	91 05       	cpc	r25, r1
 ca6:	90 f4       	brcc	.+36     	; 0xccc <program_memory_read+0x2a>
   {
      return data[address];
 ca8:	88 0f       	add	r24, r24
 caa:	99 1f       	adc	r25, r25
 cac:	88 0f       	add	r24, r24
 cae:	99 1f       	adc	r25, r25
 cb0:	88 0f       	add	r24, r24
 cb2:	99 1f       	adc	r25, r25
 cb4:	fc 01       	movw	r30, r24
 cb6:	eb 5d       	subi	r30, 0xDB	; 219
 cb8:	fc 4f       	sbci	r31, 0xFC	; 252
 cba:	20 81       	ld	r18, Z
 cbc:	31 81       	ldd	r19, Z+1	; 0x01
 cbe:	42 81       	ldd	r20, Z+2	; 0x02
 cc0:	53 81       	ldd	r21, Z+3	; 0x03
 cc2:	64 81       	ldd	r22, Z+4	; 0x04
 cc4:	75 81       	ldd	r23, Z+5	; 0x05
 cc6:	86 81       	ldd	r24, Z+6	; 0x06
 cc8:	97 81       	ldd	r25, Z+7	; 0x07
 cca:	08 95       	ret
   }
   else
   {
      return 0x00;
 ccc:	20 e0       	ldi	r18, 0x00	; 0
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	40 e0       	ldi	r20, 0x00	; 0
 cd2:	50 e0       	ldi	r21, 0x00	; 0
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	70 e0       	ldi	r23, 0x00	; 0
 cd8:	80 e0       	ldi	r24, 0x00	; 0
 cda:	90 e0       	ldi	r25, 0x00	; 0
   }
}
 cdc:	08 95       	ret

00000cde <stack_reset>:
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
   for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
 cde:	80 e0       	ldi	r24, 0x00	; 0
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	0c c0       	rjmp	.+24     	; 0xcfc <stack_reset+0x1e>
   {
      stack[i] = 0x00;
 ce4:	fc 01       	movw	r30, r24
 ce6:	ee 0f       	add	r30, r30
 ce8:	ff 1f       	adc	r31, r31
 cea:	ee 0f       	add	r30, r30
 cec:	ff 1f       	adc	r31, r31
 cee:	e0 51       	subi	r30, 0x10	; 16
 cf0:	fc 4f       	sbci	r31, 0xFC	; 252
 cf2:	10 82       	st	Z, r1
 cf4:	11 82       	std	Z+1, r1	; 0x01
 cf6:	12 82       	std	Z+2, r1	; 0x02
 cf8:	13 82       	std	Z+3, r1	; 0x03
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
   for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
 cfa:	01 96       	adiw	r24, 0x01	; 1
 cfc:	84 36       	cpi	r24, 0x64	; 100
 cfe:	91 05       	cpc	r25, r1
 d00:	88 f3       	brcs	.-30     	; 0xce4 <stack_reset+0x6>
   {
      stack[i] = 0x00;
   }

   sp = STACK_ADDRESS_WIDTH - 1;
 d02:	83 e6       	ldi	r24, 0x63	; 99
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <sp+0x1>
 d0a:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <sp>
   stack_empty = true;
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <stack_empty>
 d14:	08 95       	ret

00000d16 <stack_push>:
*
*             - value: 8 bit value to push to the stack.
********************************************************************************/
int stack_push(const uint32_t value)
{
   if (sp == 0)
 d16:	40 91 ee 03 	lds	r20, 0x03EE	; 0x8003ee <sp>
 d1a:	50 91 ef 03 	lds	r21, 0x03EF	; 0x8003ef <sp+0x1>
 d1e:	41 15       	cp	r20, r1
 d20:	51 05       	cpc	r21, r1
 d22:	51 f1       	breq	.+84     	; 0xd78 <stack_push+0x62>
   {
      return 1;
   }
   else
   {
      if (stack_empty)
 d24:	20 91 ed 03 	lds	r18, 0x03ED	; 0x8003ed <stack_empty>
 d28:	22 23       	and	r18, r18
 d2a:	89 f0       	breq	.+34     	; 0xd4e <stack_push+0x38>
      {
         stack[sp] = value;
 d2c:	9a 01       	movw	r18, r20
 d2e:	22 0f       	add	r18, r18
 d30:	33 1f       	adc	r19, r19
 d32:	22 0f       	add	r18, r18
 d34:	33 1f       	adc	r19, r19
 d36:	f9 01       	movw	r30, r18
 d38:	e0 51       	subi	r30, 0x10	; 16
 d3a:	fc 4f       	sbci	r31, 0xFC	; 252
 d3c:	60 83       	st	Z, r22
 d3e:	71 83       	std	Z+1, r23	; 0x01
 d40:	82 83       	std	Z+2, r24	; 0x02
 d42:	93 83       	std	Z+3, r25	; 0x03
         stack_empty = false;
 d44:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <stack_empty>
      }
      else
      {
         stack[--sp] = value;
      }
      return 0;
 d48:	80 e0       	ldi	r24, 0x00	; 0
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	08 95       	ret
         stack[sp] = value;
         stack_empty = false;
      }
      else
      {
         stack[--sp] = value;
 d4e:	9a 01       	movw	r18, r20
 d50:	21 50       	subi	r18, 0x01	; 1
 d52:	31 09       	sbc	r19, r1
 d54:	30 93 ef 03 	sts	0x03EF, r19	; 0x8003ef <sp+0x1>
 d58:	20 93 ee 03 	sts	0x03EE, r18	; 0x8003ee <sp>
 d5c:	22 0f       	add	r18, r18
 d5e:	33 1f       	adc	r19, r19
 d60:	22 0f       	add	r18, r18
 d62:	33 1f       	adc	r19, r19
 d64:	f9 01       	movw	r30, r18
 d66:	e0 51       	subi	r30, 0x10	; 16
 d68:	fc 4f       	sbci	r31, 0xFC	; 252
 d6a:	60 83       	st	Z, r22
 d6c:	71 83       	std	Z+1, r23	; 0x01
 d6e:	82 83       	std	Z+2, r24	; 0x02
 d70:	93 83       	std	Z+3, r25	; 0x03
      }
      return 0;
 d72:	80 e0       	ldi	r24, 0x00	; 0
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	08 95       	ret
********************************************************************************/
int stack_push(const uint32_t value)
{
   if (sp == 0)
   {
      return 1;
 d78:	81 e0       	ldi	r24, 0x01	; 1
 d7a:	90 e0       	ldi	r25, 0x00	; 0
      {
         stack[--sp] = value;
      }
      return 0;
   }
}
 d7c:	08 95       	ret

00000d7e <stack_pop>:
* stack_pop: Returns 8 bit value popped from the stack. If the stack is empty,
*            the value 0x00 is returned.
********************************************************************************/
uint32_t stack_pop(void)
{
   if (stack_empty)
 d7e:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <stack_empty>
 d82:	81 11       	cpse	r24, r1
 d84:	29 c0       	rjmp	.+82     	; 0xdd8 <stack_pop+0x5a>
   {
      return 0x00;
   }
   else
   {
      if (sp < STACK_ADDRESS_WIDTH - 1)
 d86:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <sp>
 d8a:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <sp+0x1>
 d8e:	83 36       	cpi	r24, 0x63	; 99
 d90:	91 05       	cpc	r25, r1
 d92:	98 f4       	brcc	.+38     	; 0xdba <stack_pop+0x3c>
      {
         return stack[sp++];
 d94:	9c 01       	movw	r18, r24
 d96:	2f 5f       	subi	r18, 0xFF	; 255
 d98:	3f 4f       	sbci	r19, 0xFF	; 255
 d9a:	30 93 ef 03 	sts	0x03EF, r19	; 0x8003ef <sp+0x1>
 d9e:	20 93 ee 03 	sts	0x03EE, r18	; 0x8003ee <sp>
 da2:	88 0f       	add	r24, r24
 da4:	99 1f       	adc	r25, r25
 da6:	88 0f       	add	r24, r24
 da8:	99 1f       	adc	r25, r25
 daa:	fc 01       	movw	r30, r24
 dac:	e0 51       	subi	r30, 0x10	; 16
 dae:	fc 4f       	sbci	r31, 0xFC	; 252
 db0:	60 81       	ld	r22, Z
 db2:	71 81       	ldd	r23, Z+1	; 0x01
 db4:	82 81       	ldd	r24, Z+2	; 0x02
 db6:	93 81       	ldd	r25, Z+3	; 0x03
 db8:	08 95       	ret
      }
      else
      {
         stack_empty = true;
 dba:	21 e0       	ldi	r18, 0x01	; 1
 dbc:	20 93 ed 03 	sts	0x03ED, r18	; 0x8003ed <stack_empty>
         return stack[sp];
 dc0:	88 0f       	add	r24, r24
 dc2:	99 1f       	adc	r25, r25
 dc4:	88 0f       	add	r24, r24
 dc6:	99 1f       	adc	r25, r25
 dc8:	fc 01       	movw	r30, r24
 dca:	e0 51       	subi	r30, 0x10	; 16
 dcc:	fc 4f       	sbci	r31, 0xFC	; 252
 dce:	60 81       	ld	r22, Z
 dd0:	71 81       	ldd	r23, Z+1	; 0x01
 dd2:	82 81       	ldd	r24, Z+2	; 0x02
 dd4:	93 81       	ldd	r25, Z+3	; 0x03
 dd6:	08 95       	ret
********************************************************************************/
uint32_t stack_pop(void)
{
   if (stack_empty)
   {
      return 0x00;
 dd8:	60 e0       	ldi	r22, 0x00	; 0
 dda:	70 e0       	ldi	r23, 0x00	; 0
 ddc:	cb 01       	movw	r24, r22
      {
         stack_empty = true;
         return stack[sp];
      }
   }
}
 dde:	08 95       	ret

00000de0 <__tablejump2__>:
 de0:	ee 0f       	add	r30, r30
 de2:	ff 1f       	adc	r31, r31
 de4:	05 90       	lpm	r0, Z+
 de6:	f4 91       	lpm	r31, Z
 de8:	e0 2d       	mov	r30, r0
 dea:	09 94       	ijmp

00000dec <__ashrdi3>:
 dec:	97 fb       	bst	r25, 7
 dee:	10 f8       	bld	r1, 0

00000df0 <__lshrdi3>:
 df0:	16 94       	lsr	r1
 df2:	00 08       	sbc	r0, r0
 df4:	0f 93       	push	r16
 df6:	08 30       	cpi	r16, 0x08	; 8
 df8:	98 f0       	brcs	.+38     	; 0xe20 <__lshrdi3+0x30>
 dfa:	08 50       	subi	r16, 0x08	; 8
 dfc:	23 2f       	mov	r18, r19
 dfe:	34 2f       	mov	r19, r20
 e00:	45 2f       	mov	r20, r21
 e02:	56 2f       	mov	r21, r22
 e04:	67 2f       	mov	r22, r23
 e06:	78 2f       	mov	r23, r24
 e08:	89 2f       	mov	r24, r25
 e0a:	90 2d       	mov	r25, r0
 e0c:	f4 cf       	rjmp	.-24     	; 0xdf6 <__lshrdi3+0x6>
 e0e:	05 94       	asr	r0
 e10:	97 95       	ror	r25
 e12:	87 95       	ror	r24
 e14:	77 95       	ror	r23
 e16:	67 95       	ror	r22
 e18:	57 95       	ror	r21
 e1a:	47 95       	ror	r20
 e1c:	37 95       	ror	r19
 e1e:	27 95       	ror	r18
 e20:	0a 95       	dec	r16
 e22:	aa f7       	brpl	.-22     	; 0xe0e <__lshrdi3+0x1e>
 e24:	0f 91       	pop	r16
 e26:	08 95       	ret

00000e28 <_exit>:
 e28:	f8 94       	cli

00000e2a <__stop_program>:
 e2a:	ff cf       	rjmp	.-2      	; 0xe2a <__stop_program>
