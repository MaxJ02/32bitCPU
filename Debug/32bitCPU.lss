
32bitCPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000134e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a4  00800100  00800100  0000134e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017b0  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb2  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9c  00000000  00000000  0000384a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  000044e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061b  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000951  00000000  00000000  00004d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000056e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       8:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
       c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      10:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      14:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      18:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      1c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      20:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      24:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      2c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      34:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      3c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      40:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      44:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      4c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      50:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      58:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      5c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      60:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__bad_interrupt>
      68:	7e 07       	cpc	r23, r30
      6a:	e5 02       	muls	r30, r21
      6c:	fc 02       	muls	r31, r28
      6e:	1a 03       	fmul	r17, r18
      70:	4f 03       	fmul	r20, r23
      72:	64 03       	mulsu	r22, r20
      74:	79 03       	fmul	r23, r17
      76:	8e 03       	fmulsu	r16, r22
      78:	9d 03       	fmulsu	r17, r21
      7a:	c4 03       	fmuls	r20, r20
      7c:	eb 03       	fmulsu	r22, r19
      7e:	12 04       	cpc	r1, r2
      80:	3f 04       	cpc	r3, r15
      82:	6c 04       	cpc	r6, r12
      84:	99 04       	cpc	r9, r9
      86:	c0 04       	cpc	r12, r0
      88:	e7 04       	cpc	r14, r7
      8a:	14 05       	cpc	r17, r4
      8c:	41 05       	cpc	r20, r1
      8e:	64 05       	cpc	r22, r4
      90:	87 05       	cpc	r24, r7
      92:	aa 05       	cpc	r26, r10
      94:	d3 05       	cpc	r29, r3
      96:	dc 05       	cpc	r29, r12
      98:	e9 05       	cpc	r30, r9
      9a:	f6 05       	cpc	r31, r6
      9c:	03 06       	cpc	r0, r19
      9e:	12 06       	cpc	r1, r18
      a0:	21 06       	cpc	r2, r17
      a2:	2e 06       	cpc	r2, r30
      a4:	3f 06       	cpc	r3, r31
      a6:	46 06       	cpc	r4, r22
      a8:	52 06       	cpc	r5, r18
      aa:	63 06       	cpc	r6, r19
      ac:	74 06       	cpc	r7, r20
      ae:	8b 06       	cpc	r8, r27
      b0:	a2 06       	cpc	r10, r18
      b2:	a8 06       	cpc	r10, r24
      b4:	ae 06       	cpc	r10, r30
      b6:	de 06       	cpc	r13, r30
      b8:	15 07       	cpc	r17, r21
      ba:	45 07       	cpc	r20, r21

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d8 e0       	ldi	r29, 0x08	; 8
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_clear_bss>:
      c8:	28 e0       	ldi	r18, 0x08	; 8
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a4 3a       	cpi	r26, 0xA4	; 164
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 cf 07 	call	0xf9e	; 0xf9e <main>
      dc:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <_exit>

000000e0 <__bad_interrupt>:
      e0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e4 <alu>:
********************************************************************************/
uint32_t alu(const uint32_t operation,
            const uint32_t a,
            const uint32_t b,
            uint8_t* sr)
{
      e4:	4f 92       	push	r4
      e6:	5f 92       	push	r5
      e8:	6f 92       	push	r6
      ea:	7f 92       	push	r7
      ec:	8f 92       	push	r8
      ee:	9f 92       	push	r9
      f0:	af 92       	push	r10
      f2:	bf 92       	push	r11
      f4:	cf 92       	push	r12
      f6:	df 92       	push	r13
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	f6 01       	movw	r30, r12
   uint64_t result = 0x00;
   *sr &= ~((1 << S) | (1 << N) | (1 << Z) | (1 << V) | (1 << C));
     106:	a0 81       	ld	r26, Z
     108:	a0 7e       	andi	r26, 0xE0	; 224
     10a:	ca 2e       	mov	r12, r26
     10c:	a0 83       	st	Z, r26

   switch (operation)
     10e:	6d 30       	cpi	r22, 0x0D	; 13
     110:	71 05       	cpc	r23, r1
     112:	81 05       	cpc	r24, r1
     114:	91 05       	cpc	r25, r1
     116:	49 f1       	breq	.+82     	; 0x16a <alu+0x86>
     118:	58 f4       	brcc	.+22     	; 0x130 <alu+0x4c>
     11a:	6b 30       	cpi	r22, 0x0B	; 11
     11c:	71 05       	cpc	r23, r1
     11e:	81 05       	cpc	r24, r1
     120:	91 05       	cpc	r25, r1
     122:	89 f0       	breq	.+34     	; 0x146 <alu+0x62>
     124:	6c 30       	cpi	r22, 0x0C	; 12
     126:	71 05       	cpc	r23, r1
     128:	81 05       	cpc	r24, r1
     12a:	91 05       	cpc	r25, r1
     12c:	a9 f0       	breq	.+42     	; 0x158 <alu+0x74>
     12e:	55 c0       	rjmp	.+170    	; 0x1da <alu+0xf6>
     130:	60 31       	cpi	r22, 0x10	; 16
     132:	71 05       	cpc	r23, r1
     134:	81 05       	cpc	r24, r1
     136:	91 05       	cpc	r25, r1
     138:	09 f1       	breq	.+66     	; 0x17c <alu+0x98>
     13a:	61 31       	cpi	r22, 0x11	; 17
     13c:	71 05       	cpc	r23, r1
     13e:	81 05       	cpc	r24, r1
     140:	91 05       	cpc	r25, r1
     142:	29 f1       	breq	.+74     	; 0x18e <alu+0xaa>
     144:	4a c0       	rjmp	.+148    	; 0x1da <alu+0xf6>
   {
      case OR:
      {
         result = a | b; 
     146:	da 01       	movw	r26, r20
     148:	c9 01       	movw	r24, r18
     14a:	8e 29       	or	r24, r14
     14c:	9f 29       	or	r25, r15
     14e:	a0 2b       	or	r26, r16
     150:	b1 2b       	or	r27, r17
     152:	bc 01       	movw	r22, r24
     154:	cd 01       	movw	r24, r26
         break;
     156:	45 c0       	rjmp	.+138    	; 0x1e2 <alu+0xfe>
      }
      case AND:
      {
         result = a & b;
     158:	da 01       	movw	r26, r20
     15a:	c9 01       	movw	r24, r18
     15c:	8e 21       	and	r24, r14
     15e:	9f 21       	and	r25, r15
     160:	a0 23       	and	r26, r16
     162:	b1 23       	and	r27, r17
     164:	bc 01       	movw	r22, r24
     166:	cd 01       	movw	r24, r26
         break;
     168:	3c c0       	rjmp	.+120    	; 0x1e2 <alu+0xfe>
      }
      case XOR:
      {
         result = a ^ b;
     16a:	da 01       	movw	r26, r20
     16c:	c9 01       	movw	r24, r18
     16e:	8e 25       	eor	r24, r14
     170:	9f 25       	eor	r25, r15
     172:	a0 27       	eor	r26, r16
     174:	b1 27       	eor	r27, r17
     176:	bc 01       	movw	r22, r24
     178:	cd 01       	movw	r24, r26
         break;
     17a:	33 c0       	rjmp	.+102    	; 0x1e2 <alu+0xfe>
      }
      case ADD:
      {
         result = a + b;
     17c:	da 01       	movw	r26, r20
     17e:	c9 01       	movw	r24, r18
     180:	8e 0d       	add	r24, r14
     182:	9f 1d       	adc	r25, r15
     184:	a0 1f       	adc	r26, r16
     186:	b1 1f       	adc	r27, r17
     188:	bc 01       	movw	r22, r24
     18a:	cd 01       	movw	r24, r26
     18c:	2a c0       	rjmp	.+84     	; 0x1e2 <alu+0xfe>
         }
         break;
      }
      case SUB:
      {
         result = a + (256 - b); /* 256 - b is the 2-complement representation of B. */
     18e:	29 01       	movw	r4, r18
     190:	3a 01       	movw	r6, r20
     192:	4e 18       	sub	r4, r14
     194:	5f 08       	sbc	r5, r15
     196:	60 0a       	sbc	r6, r16
     198:	71 0a       	sbc	r7, r17
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	58 1a       	sub	r5, r24
     19e:	68 0a       	sbc	r6, r24
     1a0:	78 0a       	sbc	r7, r24
     1a2:	c3 01       	movw	r24, r6
     1a4:	b2 01       	movw	r22, r4
*       - reg: Reference to the register.
*       - bit: The bit to be read in the referenced register.
********************************************************************************/
static inline bool read(const uint32_t reg, const uint8_t bit)
{
	return (bool)(reg & (1 << bit));
     1a6:	dd 24       	eor	r13, r13
     1a8:	d3 94       	inc	r13
     1aa:	27 ff       	sbrs	r18, 7
     1ac:	d1 2c       	mov	r13, r1

         if ((read(a, 7) == read((256 - b), 7)) && (read(result, 7) != read(a, 7)))
     1ae:	81 2c       	mov	r8, r1
     1b0:	91 2c       	mov	r9, r1
     1b2:	54 01       	movw	r10, r8
     1b4:	93 94       	inc	r9
     1b6:	8e 18       	sub	r8, r14
     1b8:	9f 08       	sbc	r9, r15
     1ba:	a0 0a       	sbc	r10, r16
     1bc:	b1 0a       	sbc	r11, r17
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	87 fe       	sbrs	r8, 7
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	4d 11       	cpse	r20, r13
     1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <alu+0xfe>
     1c8:	41 e0       	ldi	r20, 0x01	; 1
     1ca:	47 fe       	sbrs	r4, 7
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	d4 16       	cp	r13, r20
     1d0:	41 f0       	breq	.+16     	; 0x1e2 <alu+0xfe>
         {
            set(*sr, V);
     1d2:	3c 2d       	mov	r19, r12
     1d4:	32 60       	ori	r19, 0x02	; 2
     1d6:	30 83       	st	Z, r19
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <alu+0xfe>
uint32_t alu(const uint32_t operation,
            const uint32_t a,
            const uint32_t b,
            uint8_t* sr)
{
   uint64_t result = 0x00;
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
         break;
      }
   }

   if (read(result, 32) == 1)         set(*sr, N);
   if ((uint32_t)(result) == 0)       set(*sr, Z);
     1e2:	61 15       	cp	r22, r1
     1e4:	71 05       	cpc	r23, r1
     1e6:	81 05       	cpc	r24, r1
     1e8:	91 05       	cpc	r25, r1
     1ea:	19 f4       	brne	.+6      	; 0x1f2 <alu+0x10e>
     1ec:	20 81       	ld	r18, Z
     1ee:	24 60       	ori	r18, 0x04	; 4
     1f0:	20 83       	st	Z, r18
   if (read(result, 32) == 1)         set(*sr, C);
   if (read(*sr, N) != read(*sr, V)) set(*sr, S);
     1f2:	20 81       	ld	r18, Z
     1f4:	23 fb       	bst	r18, 3
     1f6:	33 27       	eor	r19, r19
     1f8:	30 f9       	bld	r19, 0
     1fa:	21 fb       	bst	r18, 1
     1fc:	44 27       	eor	r20, r20
     1fe:	40 f9       	bld	r20, 0
     200:	43 17       	cp	r20, r19
     202:	11 f0       	breq	.+4      	; 0x208 <alu+0x124>
     204:	20 61       	ori	r18, 0x10	; 16
     206:	20 83       	st	Z, r18

   return (uint32_t)(result);
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	ff 90       	pop	r15
     212:	ef 90       	pop	r14
     214:	df 90       	pop	r13
     216:	cf 90       	pop	r12
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	7f 90       	pop	r7
     222:	6f 90       	pop	r6
     224:	5f 90       	pop	r5
     226:	4f 90       	pop	r4
     228:	08 95       	ret

0000022a <control_unit_io_reset>:
}

static void control_unit_io_reset(void)
{
	
	DDRB = 0;
     22a:	14 b8       	out	0x04, r1	; 4
	DDRC = 0;
     22c:	17 b8       	out	0x07, r1	; 7
	DDRD = 0;
     22e:	1a b8       	out	0x0a, r1	; 10
	
	PORTB = 0;
     230:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
     232:	18 b8       	out	0x08, r1	; 8
	PORTD = 0;
     234:	1b b8       	out	0x0b, r1	; 11
     236:	08 95       	ret

00000238 <control_unit_io_update>:
	return;
}
static void control_unit_io_update(void)
{
     238:	8f 92       	push	r8
     23a:	9f 92       	push	r9
     23c:	af 92       	push	r10
     23e:	bf 92       	push	r11
     240:	cf 92       	push	r12
     242:	df 92       	push	r13
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
	const uint32_t ddra = data_memory_read(DDRA);
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     250:	4b 01       	movw	r8, r22
     252:	5c 01       	movw	r10, r24
	const uint32_t porta = data_memory_read(PORTA);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     25c:	6b 01       	movw	r12, r22
     25e:	7c 01       	movw	r14, r24
	const uint32_t pina = PIND | ((uint32_t)(PINB) << 8) | ((uint32_t)(PINC) << 16);
     260:	89 b1       	in	r24, 0x09	; 9
     262:	43 b1       	in	r20, 0x03	; 3
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	76 2f       	mov	r23, r22
     26c:	65 2f       	mov	r22, r21
     26e:	54 2f       	mov	r21, r20
     270:	44 27       	eor	r20, r20
     272:	48 2b       	or	r20, r24
     274:	86 b1       	in	r24, 0x06	; 6
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	dc 01       	movw	r26, r24
     27e:	99 27       	eor	r25, r25
     280:	88 27       	eor	r24, r24
     282:	48 2b       	or	r20, r24
     284:	59 2b       	or	r21, r25
     286:	6a 2b       	or	r22, r26
     288:	7b 2b       	or	r23, r27
	
	data_memory_write(PINA, pina);
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
	
	DDRB = (uint8_t)(ddra >> 8);
     292:	bb 27       	eor	r27, r27
     294:	ab 2d       	mov	r26, r11
     296:	9a 2d       	mov	r25, r10
     298:	89 2d       	mov	r24, r9
     29a:	84 b9       	out	0x04, r24	; 4
	DDRC = (uint8_t)(ddra >> 16);
     29c:	c5 01       	movw	r24, r10
     29e:	aa 27       	eor	r26, r26
     2a0:	bb 27       	eor	r27, r27
     2a2:	87 b9       	out	0x07, r24	; 7
	DDRD = (uint8_t)(ddra);
     2a4:	8a b8       	out	0x0a, r8	; 10
	
	PORTB = (uint8_t)(porta >> 8);
     2a6:	bb 27       	eor	r27, r27
     2a8:	af 2d       	mov	r26, r15
     2aa:	9e 2d       	mov	r25, r14
     2ac:	8d 2d       	mov	r24, r13
     2ae:	85 b9       	out	0x05, r24	; 5
	PORTC = (uint8_t)(porta >> 16);
     2b0:	c7 01       	movw	r24, r14
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
     2b6:	88 b9       	out	0x08, r24	; 8
	PORTD = (uint8_t)(porta);
     2b8:	cb b8       	out	0x0b, r12	; 11
	return;
	
}
     2ba:	ff 90       	pop	r15
     2bc:	ef 90       	pop	r14
     2be:	df 90       	pop	r13
     2c0:	cf 90       	pop	r12
     2c2:	bf 90       	pop	r11
     2c4:	af 90       	pop	r10
     2c6:	9f 90       	pop	r9
     2c8:	8f 90       	pop	r8
     2ca:	08 95       	ret

000002cc <monitor_interrupts>:
	}
	return;
}

static void monitor_interrupts(void)
{
     2cc:	8f 92       	push	r8
     2ce:	9f 92       	push	r9
     2d0:	af 92       	push	r10
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
*                 interrupt flag PCIF0 in the PCIFR register i set to generate
*                 an interrupt request (IRQ).
********************************************************************************/
static inline void monitor_pcint(void)
{
	const uint32_t pina_current = data_memory_read(PINA);
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     2e8:	6b 01       	movw	r12, r22
     2ea:	7c 01       	movw	r14, r24
	const uint32_t pcmsk = data_memory_read(PCMSKA);
     2ec:	85 e0       	ldi	r24, 0x05	; 5
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     2f4:	8b 01       	movw	r16, r22
     2f6:	9c 01       	movw	r18, r24

	for (uint32_t i = 0; i < CPU_REGISTER_DATA_WIDTH; ++i)
     2f8:	40 e0       	ldi	r20, 0x00	; 0
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	ba 01       	movw	r22, r20
     2fe:	46 c0       	rjmp	.+140    	; 0x38c <monitor_interrupts+0xc0>
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	04 2e       	mov	r0, r20
     306:	02 c0       	rjmp	.+4      	; 0x30c <monitor_interrupts+0x40>
     308:	88 0f       	add	r24, r24
     30a:	99 1f       	adc	r25, r25
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <monitor_interrupts+0x3c>
     310:	09 2e       	mov	r0, r25
     312:	00 0c       	add	r0, r0
     314:	aa 0b       	sbc	r26, r26
     316:	bb 0b       	sbc	r27, r27
     318:	48 01       	movw	r8, r16
     31a:	59 01       	movw	r10, r18
     31c:	88 22       	and	r8, r24
     31e:	99 22       	and	r9, r25
     320:	aa 22       	and	r10, r26
     322:	bb 22       	and	r11, r27
	{
		if (read(pcmsk, i))
     324:	89 28       	or	r8, r9
     326:	8a 28       	or	r8, r10
     328:	8b 28       	or	r8, r11
     32a:	61 f1       	breq	.+88     	; 0x384 <monitor_interrupts+0xb8>
     32c:	f1 e0       	ldi	r31, 0x01	; 1
     32e:	46 01       	movw	r8, r12
     330:	57 01       	movw	r10, r14
     332:	88 22       	and	r8, r24
     334:	99 22       	and	r9, r25
     336:	aa 22       	and	r10, r26
     338:	bb 22       	and	r11, r27
     33a:	89 28       	or	r8, r9
     33c:	8a 28       	or	r8, r10
     33e:	8b 28       	or	r8, r11
     340:	09 f4       	brne	.+2      	; 0x344 <monitor_interrupts+0x78>
     342:	f0 e0       	ldi	r31, 0x00	; 0
		{
			if (read(pina_current, i) != read(pina_previous, i))
     344:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     348:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     34c:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     350:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     354:	88 21       	and	r24, r8
     356:	99 21       	and	r25, r9
     358:	aa 21       	and	r26, r10
     35a:	bb 21       	and	r27, r11
     35c:	e1 e0       	ldi	r30, 0x01	; 1
     35e:	89 2b       	or	r24, r25
     360:	8a 2b       	or	r24, r26
     362:	8b 2b       	or	r24, r27
     364:	09 f4       	brne	.+2      	; 0x368 <monitor_interrupts+0x9c>
     366:	e0 e0       	ldi	r30, 0x00	; 0
     368:	fe 17       	cp	r31, r30
     36a:	61 f0       	breq	.+24     	; 0x384 <monitor_interrupts+0xb8>
*                     - bit    : Bit to set in data memory register.
********************************************************************************/
static inline int data_memory_set_bit(const uint16_t address,
                                      const uint32_t bit)
{
	const uint32_t data = data_memory_read(address);
     36c:	84 e0       	ldi	r24, 0x04	; 4
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
	return data_memory_write(address, data | (1 << bit));
     374:	ab 01       	movw	r20, r22
     376:	bc 01       	movw	r22, r24
     378:	41 60       	ori	r20, 0x01	; 1
     37a:	84 e0       	ldi	r24, 0x04	; 4
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
     382:	0a c0       	rjmp	.+20     	; 0x398 <monitor_interrupts+0xcc>
static inline void monitor_pcint(void)
{
	const uint32_t pina_current = data_memory_read(PINA);
	const uint32_t pcmsk = data_memory_read(PCMSKA);

	for (uint32_t i = 0; i < CPU_REGISTER_DATA_WIDTH; ++i)
     384:	4f 5f       	subi	r20, 0xFF	; 255
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	6f 4f       	sbci	r22, 0xFF	; 255
     38a:	7f 4f       	sbci	r23, 0xFF	; 255
     38c:	40 32       	cpi	r20, 0x20	; 32
     38e:	51 05       	cpc	r21, r1
     390:	61 05       	cpc	r22, r1
     392:	71 05       	cpc	r23, r1
     394:	08 f4       	brcc	.+2      	; 0x398 <monitor_interrupts+0xcc>
     396:	b4 cf       	rjmp	.-152    	; 0x300 <monitor_interrupts+0x34>
				break;
			}
		}
	}

	pina_previous = pina_current;
     398:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__DATA_REGION_ORIGIN__>
     39c:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3a0:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     3a4:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

static void monitor_interrupts(void)
{
	monitor_pcint();
	return;
}
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	df 90       	pop	r13
     3b2:	cf 90       	pop	r12
     3b4:	bf 90       	pop	r11
     3b6:	af 90       	pop	r10
     3b8:	9f 90       	pop	r9
     3ba:	8f 90       	pop	r8
     3bc:	08 95       	ret

000003be <generate_interrupt>:
*                     the current interrupt is executed.
*
*                     - interrupt_vector: Jump address for generating interrupt.
********************************************************************************/
static void generate_interrupt(const uint16_t interrupt_vector)
{
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
	stack_push(pc);
     3c4:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <pc>
     3c8:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <pc+0x1>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <stack_push>
	clr(sr, I);
     3d4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     3d8:	8f 7d       	andi	r24, 0xDF	; 223
     3da:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
	pc = interrupt_vector;
     3de:	d0 93 8f 01 	sts	0x018F, r29	; 0x80018f <pc+0x1>
     3e2:	c0 93 8e 01 	sts	0x018E, r28	; 0x80018e <pc>
	return;
}
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <check_for_irq>:
*                will be generated again and again). A jump is made to the
*                corresponding interrupt vector, such as PCINT0_vect.
********************************************************************************/

static void check_for_irq(void)
{
     3ec:	cf 93       	push	r28
	if (read(sr, I))
     3ee:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     3f2:	85 ff       	sbrs	r24, 5
     3f4:	1c c0       	rjmp	.+56     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		const uint32_t pcifr = data_memory_read(IFR);
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     3fe:	c6 2f       	mov	r28, r22
		const uint32_t pcicr = data_memory_read(ICR);
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>

		if (read(pcifr, PCIFA) && read(pcicr, PCIEA))
     408:	c0 ff       	sbrs	r28, 0
     40a:	11 c0       	rjmp	.+34     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     40c:	60 ff       	sbrs	r22, 0
     40e:	0f c0       	rjmp	.+30     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
*                        - bit    : Bit to clear in data memory register.
********************************************************************************/
static inline int data_memory_clear_bit(const uint16_t address,
                                        const uint32_t bit)
{
	const uint32_t data = data_memory_read(address);
     410:	84 e0       	ldi	r24, 0x04	; 4
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
	return data_memory_write(address, data & ~(1 << bit));
     418:	ab 01       	movw	r20, r22
     41a:	bc 01       	movw	r22, r24
     41c:	4e 7f       	andi	r20, 0xFE	; 254
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
		{
			data_memory_clear_bit(IFR, PCIFA);
			generate_interrupt(PCINT_vect);
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 df 01 	call	0x3be	; 0x3be <generate_interrupt>
		}
	}
	return;
}
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <control_unit_reset>:
/********************************************************************************
* control_unit_reset: Resets control unit registers and corresponding program.
********************************************************************************/
void control_unit_reset(void)
{
	ir = 0x00;
     432:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <ir>
     436:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ir+0x1>
     43a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ir+0x2>
     43e:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <ir+0x3>
     442:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ir+0x4>
     446:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <ir+0x5>
     44a:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <ir+0x6>
     44e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <ir+0x7>
	pc = 0x00;
     452:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <pc+0x1>
     456:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <pc>
	mar = 0x00;
	sr = 0x00;
     45a:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <sr>

	op_code = 0x00;
     45e:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <op_code+0x1>
     462:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <op_code>
	op1 = 0x00;
     466:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <op1+0x1>
     46a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <op1>
	op2 = 0x00;
     46e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <op2>
     472:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <op2+0x1>
     476:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <op2+0x2>
     47a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <op2+0x3>

	state = CPU_STATE_FETCH;
     47e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <state>

	pina_previous = 0x00;
     482:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     486:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     48a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     48e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>

	for (uint32_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	dc 01       	movw	r26, r24
     498:	0e c0       	rjmp	.+28     	; 0x4b6 <control_unit_reset+0x84>
	{
		reg[i] = 0x00;
     49a:	fc 01       	movw	r30, r24
     49c:	ee 0f       	add	r30, r30
     49e:	ff 1f       	adc	r31, r31
     4a0:	ee 0f       	add	r30, r30
     4a2:	ff 1f       	adc	r31, r31
     4a4:	ec 5f       	subi	r30, 0xFC	; 252
     4a6:	fe 4f       	sbci	r31, 0xFE	; 254
     4a8:	10 82       	st	Z, r1
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	12 82       	std	Z+2, r1	; 0x02
     4ae:	13 82       	std	Z+3, r1	; 0x03

	state = CPU_STATE_FETCH;

	pina_previous = 0x00;

	for (uint32_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	a1 1d       	adc	r26, r1
     4b4:	b1 1d       	adc	r27, r1
     4b6:	80 32       	cpi	r24, 0x20	; 32
     4b8:	91 05       	cpc	r25, r1
     4ba:	a1 05       	cpc	r26, r1
     4bc:	b1 05       	cpc	r27, r1
     4be:	68 f3       	brcs	.-38     	; 0x49a <control_unit_reset+0x68>
	{
		reg[i] = 0x00;
	}


	data_memory_reset();
     4c0:	0e 94 92 07 	call	0xf24	; 0xf24 <data_memory_reset>
	stack_reset();
     4c4:	0e 94 c6 08 	call	0x118c	; 0x118c <stack_reset>
	program_memory_write();
     4c8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <program_memory_write>
	control_unit_io_reset();
     4cc:	0e 94 15 01 	call	0x22a	; 0x22a <control_unit_io_reset>
     4d0:	08 95       	ret

000004d2 <control_unit_run_next_state>:

/********************************************************************************
* control_unit_run_next_state: Runs next state in the CPU instruction cycle:
********************************************************************************/
void control_unit_run_next_state(void)
{
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
	switch (state)
     4e2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <state>
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	41 f1       	breq	.+80     	; 0x53a <control_unit_run_next_state+0x68>
     4ea:	20 f0       	brcs	.+8      	; 0x4f4 <control_unit_run_next_state+0x22>
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <control_unit_run_next_state+0x20>
     4f0:	60 c0       	rjmp	.+192    	; 0x5b2 <control_unit_run_next_state+0xe0>
     4f2:	09 c5       	rjmp	.+2578   	; 0xf06 <__stack+0x607>
	{
		case CPU_STATE_FETCH:
		{
			ir = program_memory_read(pc); /* Fetches next instruction. */
     4f4:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <pc>
     4f8:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <pc+0x1>
     4fc:	0e 94 a8 08 	call	0x1150	; 0x1150 <program_memory_read>
     500:	20 93 90 01 	sts	0x0190, r18	; 0x800190 <ir>
     504:	30 93 91 01 	sts	0x0191, r19	; 0x800191 <ir+0x1>
     508:	40 93 92 01 	sts	0x0192, r20	; 0x800192 <ir+0x2>
     50c:	50 93 93 01 	sts	0x0193, r21	; 0x800193 <ir+0x3>
     510:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <ir+0x4>
     514:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <ir+0x5>
     518:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <ir+0x6>
     51c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <ir+0x7>
			mar = pc;                     /* Stores address of current instruction. */
     520:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <pc>
     524:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <pc+0x1>
			pc++;                         /* Program counter points to next instruction. */
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     52e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
			state = CPU_STATE_DECODE;     /* Decodes the instruction during next clock cycle. */
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <state>
			break;
     538:	e8 c4       	rjmp	.+2512   	; 0xf0a <__stack+0x60b>
		}
		case CPU_STATE_DECODE:
		{
			op_code = ir >> 48;           /* Bit 23 downto 16 consists of the OP code. */
     53a:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <ir>
     53e:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <ir+0x1>
     542:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <ir+0x2>
     546:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <ir+0x3>
     54a:	f0 90 94 01 	lds	r15, 0x0194	; 0x800194 <ir+0x4>
     54e:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <ir+0x5>
     552:	d0 91 96 01 	lds	r29, 0x0196	; 0x800196 <ir+0x6>
     556:	c0 91 97 01 	lds	r28, 0x0197	; 0x800197 <ir+0x7>
     55a:	2b 2f       	mov	r18, r27
     55c:	3a 2f       	mov	r19, r26
     55e:	4f 2f       	mov	r20, r31
     560:	5e 2f       	mov	r21, r30
     562:	6f 2d       	mov	r22, r15
     564:	71 2f       	mov	r23, r17
     566:	8d 2f       	mov	r24, r29
     568:	9c 2f       	mov	r25, r28
     56a:	00 e3       	ldi	r16, 0x30	; 48
     56c:	0e 94 4f 09 	call	0x129e	; 0x129e <__lshrdi3>
     570:	82 2f       	mov	r24, r18
     572:	93 2f       	mov	r25, r19
     574:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <op_code+0x1>
     578:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <op_code>
			op1 = ir >> 32;                /* Bit 15 downto 8 consists of the first operand. */
     57c:	2b 2f       	mov	r18, r27
     57e:	3a 2f       	mov	r19, r26
     580:	4f 2f       	mov	r20, r31
     582:	5e 2f       	mov	r21, r30
     584:	6f 2d       	mov	r22, r15
     586:	71 2f       	mov	r23, r17
     588:	8d 2f       	mov	r24, r29
     58a:	9c 2f       	mov	r25, r28
     58c:	00 e2       	ldi	r16, 0x20	; 32
     58e:	0e 94 4f 09 	call	0x129e	; 0x129e <__lshrdi3>
     592:	20 93 89 01 	sts	0x0189, r18	; 0x800189 <op1>
     596:	30 93 8a 01 	sts	0x018A, r19	; 0x80018a <op1+0x1>
			op2 = ir;                     /* Bit 7 downto 0 consists of the second operand. */
     59a:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <op2>
     59e:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <op2+0x1>
     5a2:	f0 93 87 01 	sts	0x0187, r31	; 0x800187 <op2+0x2>
     5a6:	e0 93 88 01 	sts	0x0188, r30	; 0x800188 <op2+0x3>
			state = CPU_STATE_EXECUTE;    /* Executes the instruction during next clock cycle. */
     5aa:	82 e0       	ldi	r24, 0x02	; 2
     5ac:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <state>
			break;
     5b0:	ac c4       	rjmp	.+2392   	; 0xf0a <__stack+0x60b>
		}
		case CPU_STATE_EXECUTE:
		{
			switch (op_code) /* Checks the OP code.*/
     5b2:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <op_code>
     5b6:	f0 91 8c 01 	lds	r31, 0x018C	; 0x80018c <op_code+0x1>
     5ba:	ea 32       	cpi	r30, 0x2A	; 42
     5bc:	f1 05       	cpc	r31, r1
     5be:	08 f0       	brcs	.+2      	; 0x5c2 <control_unit_run_next_state+0xf0>
     5c0:	9b c4       	rjmp	.+2358   	; 0xef8 <__stack+0x5f9>
     5c2:	ec 5c       	subi	r30, 0xCC	; 204
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	0c 94 47 09 	jmp	0x128e	; 0x128e <__tablejump2__>
				{
					break;
				}
				case LDI: /* Loads constant into specified CPU register. */
				{
					reg[op1] = op2;
     5ca:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     5ce:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ec 5f       	subi	r30, 0xFC	; 252
     5dc:	fe 4f       	sbci	r31, 0xFE	; 254
     5de:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op2>
     5e2:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op2+0x1>
     5e6:	a0 91 87 01 	lds	r26, 0x0187	; 0x800187 <op2+0x2>
     5ea:	b0 91 88 01 	lds	r27, 0x0188	; 0x800188 <op2+0x3>
     5ee:	80 83       	st	Z, r24
     5f0:	91 83       	std	Z+1, r25	; 0x01
     5f2:	a2 83       	std	Z+2, r26	; 0x02
     5f4:	b3 83       	std	Z+3, r27	; 0x03
					break;
     5f6:	82 c4       	rjmp	.+2308   	; 0xefc <__stack+0x5fd>
				}
				case MOV: /* Copies value to specified CPU register. */
				{
					reg[op1] = reg[op2];
     5f8:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     5fc:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     600:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <op2>
     604:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <op2+0x1>
     608:	aa 0f       	add	r26, r26
     60a:	bb 1f       	adc	r27, r27
     60c:	aa 0f       	add	r26, r26
     60e:	bb 1f       	adc	r27, r27
     610:	ac 5f       	subi	r26, 0xFC	; 252
     612:	be 4f       	sbci	r27, 0xFE	; 254
     614:	8d 91       	ld	r24, X+
     616:	9d 91       	ld	r25, X+
     618:	0d 90       	ld	r0, X+
     61a:	bc 91       	ld	r27, X
     61c:	a0 2d       	mov	r26, r0
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ec 5f       	subi	r30, 0xFC	; 252
     628:	fe 4f       	sbci	r31, 0xFE	; 254
     62a:	80 83       	st	Z, r24
     62c:	91 83       	std	Z+1, r25	; 0x01
     62e:	a2 83       	std	Z+2, r26	; 0x02
     630:	b3 83       	std	Z+3, r27	; 0x03
					break;
     632:	64 c4       	rjmp	.+2248   	; 0xefc <__stack+0x5fd>
				}
				case OUT: /* Writes value to I/O location (address 0 - 255) in data memory. */
				{
					if (op1 == PINA)
     634:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     638:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	91 05       	cpc	r25, r1
     640:	e9 f4       	brne	.+58     	; 0x67c <control_unit_run_next_state+0x1aa>
					{
						const uint32_t data = data_memory_read(PORTA);
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
						data_memory_write(PORTA, data ^ reg[op2]);
     64a:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     64e:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     652:	ee 0f       	add	r30, r30
     654:	ff 1f       	adc	r31, r31
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	ec 5f       	subi	r30, 0xFC	; 252
     65c:	fe 4f       	sbci	r31, 0xFE	; 254
     65e:	00 81       	ld	r16, Z
     660:	11 81       	ldd	r17, Z+1	; 0x01
     662:	22 81       	ldd	r18, Z+2	; 0x02
     664:	33 81       	ldd	r19, Z+3	; 0x03
     666:	ab 01       	movw	r20, r22
     668:	bc 01       	movw	r22, r24
     66a:	40 27       	eor	r20, r16
     66c:	51 27       	eor	r21, r17
     66e:	62 27       	eor	r22, r18
     670:	73 27       	eor	r23, r19
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
     67a:	40 c4       	rjmp	.+2176   	; 0xefc <__stack+0x5fd>
					}
					else
					{
						data_memory_write(op1, reg[op2]);
     67c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     680:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     684:	ee 0f       	add	r30, r30
     686:	ff 1f       	adc	r31, r31
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	ec 5f       	subi	r30, 0xFC	; 252
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	40 81       	ld	r20, Z
     692:	51 81       	ldd	r21, Z+1	; 0x01
     694:	62 81       	ldd	r22, Z+2	; 0x02
     696:	73 81       	ldd	r23, Z+3	; 0x03
     698:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
     69c:	2f c4       	rjmp	.+2142   	; 0xefc <__stack+0x5fd>
					}
					break;
				}
				case IN: /* Reads value from I/O location (address 0 - 255) in data memory. */
				{
					reg[op1] = data_memory_read(op2);
     69e:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     6a2:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     6a6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op2>
     6aa:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op2+0x1>
     6ae:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     6b2:	cc 0f       	add	r28, r28
     6b4:	dd 1f       	adc	r29, r29
     6b6:	cc 0f       	add	r28, r28
     6b8:	dd 1f       	adc	r29, r29
     6ba:	cc 5f       	subi	r28, 0xFC	; 252
     6bc:	de 4f       	sbci	r29, 0xFE	; 254
     6be:	68 83       	st	Y, r22
     6c0:	79 83       	std	Y+1, r23	; 0x01
     6c2:	8a 83       	std	Y+2, r24	; 0x02
     6c4:	9b 83       	std	Y+3, r25	; 0x03
					break;
     6c6:	1a c4       	rjmp	.+2100   	; 0xefc <__stack+0x5fd>
				}
				case STS: /* Stores value to data memory (address 256 - 511, hence an offset of 256). */
				{
					data_memory_write(op1, reg[op2]);
     6c8:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     6cc:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	ec 5f       	subi	r30, 0xFC	; 252
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	40 81       	ld	r20, Z
     6de:	51 81       	ldd	r21, Z+1	; 0x01
     6e0:	62 81       	ldd	r22, Z+2	; 0x02
     6e2:	73 81       	ldd	r23, Z+3	; 0x03
     6e4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     6e8:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     6ec:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
					break;
     6f0:	05 c4       	rjmp	.+2058   	; 0xefc <__stack+0x5fd>
				}
				case LDS: /* Loads value from data memory (address 256 - 511, hence an offset of 256). */
				{
					reg[op1] = data_memory_read(op2);
     6f2:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     6f6:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     6fa:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <op2>
     6fe:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <op2+0x1>
     702:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     706:	cc 0f       	add	r28, r28
     708:	dd 1f       	adc	r29, r29
     70a:	cc 0f       	add	r28, r28
     70c:	dd 1f       	adc	r29, r29
     70e:	cc 5f       	subi	r28, 0xFC	; 252
     710:	de 4f       	sbci	r29, 0xFE	; 254
     712:	68 83       	st	Y, r22
     714:	79 83       	std	Y+1, r23	; 0x01
     716:	8a 83       	std	Y+2, r24	; 0x02
     718:	9b 83       	std	Y+3, r25	; 0x03
					break;
     71a:	f0 c3       	rjmp	.+2016   	; 0xefc <__stack+0x5fd>
				}
				case CLR: /* Clears content of CPU register. */
				{
					reg[op1] = 0x00;
     71c:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     720:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	ec 5f       	subi	r30, 0xFC	; 252
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	10 82       	st	Z, r1
     732:	11 82       	std	Z+1, r1	; 0x01
     734:	12 82       	std	Z+2, r1	; 0x02
     736:	13 82       	std	Z+3, r1	; 0x03
					break;
     738:	e1 c3       	rjmp	.+1986   	; 0xefc <__stack+0x5fd>
				}
				case ORI: /* Performs bitwise OR with a constant. */
				{
					reg[op1] = alu(OR, reg[op1], op2, &sr);
     73a:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     73e:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     742:	e0 90 85 01 	lds	r14, 0x0185	; 0x800185 <op2>
     746:	f0 90 86 01 	lds	r15, 0x0186	; 0x800186 <op2+0x1>
     74a:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <op2+0x2>
     74e:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <op2+0x3>
     752:	cc 0f       	add	r28, r28
     754:	dd 1f       	adc	r29, r29
     756:	cc 0f       	add	r28, r28
     758:	dd 1f       	adc	r29, r29
     75a:	cc 5f       	subi	r28, 0xFC	; 252
     75c:	de 4f       	sbci	r29, 0xFE	; 254
     75e:	28 81       	ld	r18, Y
     760:	39 81       	ldd	r19, Y+1	; 0x01
     762:	4a 81       	ldd	r20, Y+2	; 0x02
     764:	5b 81       	ldd	r21, Y+3	; 0x03
     766:	0f 2e       	mov	r0, r31
     768:	fd e8       	ldi	r31, 0x8D	; 141
     76a:	cf 2e       	mov	r12, r31
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	df 2e       	mov	r13, r31
     770:	f0 2d       	mov	r31, r0
     772:	6b e0       	ldi	r22, 0x0B	; 11
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     77e:	68 83       	st	Y, r22
     780:	79 83       	std	Y+1, r23	; 0x01
     782:	8a 83       	std	Y+2, r24	; 0x02
     784:	9b 83       	std	Y+3, r25	; 0x03
					break;
     786:	ba c3       	rjmp	.+1908   	; 0xefc <__stack+0x5fd>
				}
				case ANDI: /* Performs bitwise AND with a constant. */
				{
					reg[op1] = alu(AND, reg[op1], op2, &sr);
     788:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     78c:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     790:	e0 90 85 01 	lds	r14, 0x0185	; 0x800185 <op2>
     794:	f0 90 86 01 	lds	r15, 0x0186	; 0x800186 <op2+0x1>
     798:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <op2+0x2>
     79c:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <op2+0x3>
     7a0:	cc 0f       	add	r28, r28
     7a2:	dd 1f       	adc	r29, r29
     7a4:	cc 0f       	add	r28, r28
     7a6:	dd 1f       	adc	r29, r29
     7a8:	cc 5f       	subi	r28, 0xFC	; 252
     7aa:	de 4f       	sbci	r29, 0xFE	; 254
     7ac:	28 81       	ld	r18, Y
     7ae:	39 81       	ldd	r19, Y+1	; 0x01
     7b0:	4a 81       	ldd	r20, Y+2	; 0x02
     7b2:	5b 81       	ldd	r21, Y+3	; 0x03
     7b4:	0f 2e       	mov	r0, r31
     7b6:	fd e8       	ldi	r31, 0x8D	; 141
     7b8:	cf 2e       	mov	r12, r31
     7ba:	f1 e0       	ldi	r31, 0x01	; 1
     7bc:	df 2e       	mov	r13, r31
     7be:	f0 2d       	mov	r31, r0
     7c0:	6c e0       	ldi	r22, 0x0C	; 12
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     7cc:	68 83       	st	Y, r22
     7ce:	79 83       	std	Y+1, r23	; 0x01
     7d0:	8a 83       	std	Y+2, r24	; 0x02
     7d2:	9b 83       	std	Y+3, r25	; 0x03
					break;
     7d4:	93 c3       	rjmp	.+1830   	; 0xefc <__stack+0x5fd>
				}
				case XORI: /* Performs bitwise XOR with a constant. */
				{
					reg[op1] = alu(XOR, reg[op1], op2, &sr);
     7d6:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     7da:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     7de:	e0 90 85 01 	lds	r14, 0x0185	; 0x800185 <op2>
     7e2:	f0 90 86 01 	lds	r15, 0x0186	; 0x800186 <op2+0x1>
     7e6:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <op2+0x2>
     7ea:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <op2+0x3>
     7ee:	cc 0f       	add	r28, r28
     7f0:	dd 1f       	adc	r29, r29
     7f2:	cc 0f       	add	r28, r28
     7f4:	dd 1f       	adc	r29, r29
     7f6:	cc 5f       	subi	r28, 0xFC	; 252
     7f8:	de 4f       	sbci	r29, 0xFE	; 254
     7fa:	28 81       	ld	r18, Y
     7fc:	39 81       	ldd	r19, Y+1	; 0x01
     7fe:	4a 81       	ldd	r20, Y+2	; 0x02
     800:	5b 81       	ldd	r21, Y+3	; 0x03
     802:	0f 2e       	mov	r0, r31
     804:	fd e8       	ldi	r31, 0x8D	; 141
     806:	cf 2e       	mov	r12, r31
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	df 2e       	mov	r13, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	6d e0       	ldi	r22, 0x0D	; 13
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     81a:	68 83       	st	Y, r22
     81c:	79 83       	std	Y+1, r23	; 0x01
     81e:	8a 83       	std	Y+2, r24	; 0x02
     820:	9b 83       	std	Y+3, r25	; 0x03
					break;
     822:	6c c3       	rjmp	.+1752   	; 0xefc <__stack+0x5fd>
				}
				case OR: /* Performs bitwise OR with content in CPU register. */
				{
					reg[op1] = alu(OR, reg[op1], reg[op2], &sr);
     824:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     828:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     82c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     830:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	ec 5f       	subi	r30, 0xFC	; 252
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
     840:	e0 80       	ld	r14, Z
     842:	f1 80       	ldd	r15, Z+1	; 0x01
     844:	02 81       	ldd	r16, Z+2	; 0x02
     846:	13 81       	ldd	r17, Z+3	; 0x03
     848:	cc 0f       	add	r28, r28
     84a:	dd 1f       	adc	r29, r29
     84c:	cc 0f       	add	r28, r28
     84e:	dd 1f       	adc	r29, r29
     850:	cc 5f       	subi	r28, 0xFC	; 252
     852:	de 4f       	sbci	r29, 0xFE	; 254
     854:	28 81       	ld	r18, Y
     856:	39 81       	ldd	r19, Y+1	; 0x01
     858:	4a 81       	ldd	r20, Y+2	; 0x02
     85a:	5b 81       	ldd	r21, Y+3	; 0x03
     85c:	0f 2e       	mov	r0, r31
     85e:	fd e8       	ldi	r31, 0x8D	; 141
     860:	cf 2e       	mov	r12, r31
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	df 2e       	mov	r13, r31
     866:	f0 2d       	mov	r31, r0
     868:	6b e0       	ldi	r22, 0x0B	; 11
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     874:	68 83       	st	Y, r22
     876:	79 83       	std	Y+1, r23	; 0x01
     878:	8a 83       	std	Y+2, r24	; 0x02
     87a:	9b 83       	std	Y+3, r25	; 0x03
					break;
     87c:	3f c3       	rjmp	.+1662   	; 0xefc <__stack+0x5fd>
				}
				case AND: /* Performs bitwise AND with content in CPU register. */
				{
					reg[op1] = alu(AND, reg[op1], reg[op2], &sr);
     87e:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     882:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     886:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     88a:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	ec 5f       	subi	r30, 0xFC	; 252
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	e0 80       	ld	r14, Z
     89c:	f1 80       	ldd	r15, Z+1	; 0x01
     89e:	02 81       	ldd	r16, Z+2	; 0x02
     8a0:	13 81       	ldd	r17, Z+3	; 0x03
     8a2:	cc 0f       	add	r28, r28
     8a4:	dd 1f       	adc	r29, r29
     8a6:	cc 0f       	add	r28, r28
     8a8:	dd 1f       	adc	r29, r29
     8aa:	cc 5f       	subi	r28, 0xFC	; 252
     8ac:	de 4f       	sbci	r29, 0xFE	; 254
     8ae:	28 81       	ld	r18, Y
     8b0:	39 81       	ldd	r19, Y+1	; 0x01
     8b2:	4a 81       	ldd	r20, Y+2	; 0x02
     8b4:	5b 81       	ldd	r21, Y+3	; 0x03
     8b6:	0f 2e       	mov	r0, r31
     8b8:	fd e8       	ldi	r31, 0x8D	; 141
     8ba:	cf 2e       	mov	r12, r31
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	df 2e       	mov	r13, r31
     8c0:	f0 2d       	mov	r31, r0
     8c2:	6c e0       	ldi	r22, 0x0C	; 12
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     8ce:	68 83       	st	Y, r22
     8d0:	79 83       	std	Y+1, r23	; 0x01
     8d2:	8a 83       	std	Y+2, r24	; 0x02
     8d4:	9b 83       	std	Y+3, r25	; 0x03
					break;
     8d6:	12 c3       	rjmp	.+1572   	; 0xefc <__stack+0x5fd>
				}
				case XOR: /* Performs bitwise AND with content in CPU register. */
				{
					reg[op1] = alu(XOR, reg[op1], reg[op2], &sr);
     8d8:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     8dc:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     8e0:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     8e4:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     8e8:	ee 0f       	add	r30, r30
     8ea:	ff 1f       	adc	r31, r31
     8ec:	ee 0f       	add	r30, r30
     8ee:	ff 1f       	adc	r31, r31
     8f0:	ec 5f       	subi	r30, 0xFC	; 252
     8f2:	fe 4f       	sbci	r31, 0xFE	; 254
     8f4:	e0 80       	ld	r14, Z
     8f6:	f1 80       	ldd	r15, Z+1	; 0x01
     8f8:	02 81       	ldd	r16, Z+2	; 0x02
     8fa:	13 81       	ldd	r17, Z+3	; 0x03
     8fc:	cc 0f       	add	r28, r28
     8fe:	dd 1f       	adc	r29, r29
     900:	cc 0f       	add	r28, r28
     902:	dd 1f       	adc	r29, r29
     904:	cc 5f       	subi	r28, 0xFC	; 252
     906:	de 4f       	sbci	r29, 0xFE	; 254
     908:	28 81       	ld	r18, Y
     90a:	39 81       	ldd	r19, Y+1	; 0x01
     90c:	4a 81       	ldd	r20, Y+2	; 0x02
     90e:	5b 81       	ldd	r21, Y+3	; 0x03
     910:	0f 2e       	mov	r0, r31
     912:	fd e8       	ldi	r31, 0x8D	; 141
     914:	cf 2e       	mov	r12, r31
     916:	f1 e0       	ldi	r31, 0x01	; 1
     918:	df 2e       	mov	r13, r31
     91a:	f0 2d       	mov	r31, r0
     91c:	6d e0       	ldi	r22, 0x0D	; 13
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     928:	68 83       	st	Y, r22
     92a:	79 83       	std	Y+1, r23	; 0x01
     92c:	8a 83       	std	Y+2, r24	; 0x02
     92e:	9b 83       	std	Y+3, r25	; 0x03
					break;
     930:	e5 c2       	rjmp	.+1482   	; 0xefc <__stack+0x5fd>
				}
				case ADDI: /* Performs addition with a constant. */
				{
					reg[op1] = alu(ADD, reg[op1], op2, &sr);
     932:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     936:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     93a:	e0 90 85 01 	lds	r14, 0x0185	; 0x800185 <op2>
     93e:	f0 90 86 01 	lds	r15, 0x0186	; 0x800186 <op2+0x1>
     942:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <op2+0x2>
     946:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <op2+0x3>
     94a:	cc 0f       	add	r28, r28
     94c:	dd 1f       	adc	r29, r29
     94e:	cc 0f       	add	r28, r28
     950:	dd 1f       	adc	r29, r29
     952:	cc 5f       	subi	r28, 0xFC	; 252
     954:	de 4f       	sbci	r29, 0xFE	; 254
     956:	28 81       	ld	r18, Y
     958:	39 81       	ldd	r19, Y+1	; 0x01
     95a:	4a 81       	ldd	r20, Y+2	; 0x02
     95c:	5b 81       	ldd	r21, Y+3	; 0x03
     95e:	0f 2e       	mov	r0, r31
     960:	fd e8       	ldi	r31, 0x8D	; 141
     962:	cf 2e       	mov	r12, r31
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	df 2e       	mov	r13, r31
     968:	f0 2d       	mov	r31, r0
     96a:	60 e1       	ldi	r22, 0x10	; 16
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     976:	68 83       	st	Y, r22
     978:	79 83       	std	Y+1, r23	; 0x01
     97a:	8a 83       	std	Y+2, r24	; 0x02
     97c:	9b 83       	std	Y+3, r25	; 0x03
					break;
     97e:	be c2       	rjmp	.+1404   	; 0xefc <__stack+0x5fd>
				}
				case SUBI: /* Performs subtraction with a constant. */
				{
					reg[op1] = alu(SUB, reg[op1], op2, &sr);
     980:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     984:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     988:	e0 90 85 01 	lds	r14, 0x0185	; 0x800185 <op2>
     98c:	f0 90 86 01 	lds	r15, 0x0186	; 0x800186 <op2+0x1>
     990:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <op2+0x2>
     994:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <op2+0x3>
     998:	cc 0f       	add	r28, r28
     99a:	dd 1f       	adc	r29, r29
     99c:	cc 0f       	add	r28, r28
     99e:	dd 1f       	adc	r29, r29
     9a0:	cc 5f       	subi	r28, 0xFC	; 252
     9a2:	de 4f       	sbci	r29, 0xFE	; 254
     9a4:	28 81       	ld	r18, Y
     9a6:	39 81       	ldd	r19, Y+1	; 0x01
     9a8:	4a 81       	ldd	r20, Y+2	; 0x02
     9aa:	5b 81       	ldd	r21, Y+3	; 0x03
     9ac:	0f 2e       	mov	r0, r31
     9ae:	fd e8       	ldi	r31, 0x8D	; 141
     9b0:	cf 2e       	mov	r12, r31
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	df 2e       	mov	r13, r31
     9b6:	f0 2d       	mov	r31, r0
     9b8:	61 e1       	ldi	r22, 0x11	; 17
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     9c4:	68 83       	st	Y, r22
     9c6:	79 83       	std	Y+1, r23	; 0x01
     9c8:	8a 83       	std	Y+2, r24	; 0x02
     9ca:	9b 83       	std	Y+3, r25	; 0x03
					break;
     9cc:	97 c2       	rjmp	.+1326   	; 0xefc <__stack+0x5fd>
				}
				case ADD: /* Performs addition with a CPU register. */
				{
					reg[op1] = alu(ADD, reg[op1], reg[op2], &sr);
     9ce:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     9d2:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     9d6:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     9da:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	ec 5f       	subi	r30, 0xFC	; 252
     9e8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ea:	e0 80       	ld	r14, Z
     9ec:	f1 80       	ldd	r15, Z+1	; 0x01
     9ee:	02 81       	ldd	r16, Z+2	; 0x02
     9f0:	13 81       	ldd	r17, Z+3	; 0x03
     9f2:	cc 0f       	add	r28, r28
     9f4:	dd 1f       	adc	r29, r29
     9f6:	cc 0f       	add	r28, r28
     9f8:	dd 1f       	adc	r29, r29
     9fa:	cc 5f       	subi	r28, 0xFC	; 252
     9fc:	de 4f       	sbci	r29, 0xFE	; 254
     9fe:	28 81       	ld	r18, Y
     a00:	39 81       	ldd	r19, Y+1	; 0x01
     a02:	4a 81       	ldd	r20, Y+2	; 0x02
     a04:	5b 81       	ldd	r21, Y+3	; 0x03
     a06:	0f 2e       	mov	r0, r31
     a08:	fd e8       	ldi	r31, 0x8D	; 141
     a0a:	cf 2e       	mov	r12, r31
     a0c:	f1 e0       	ldi	r31, 0x01	; 1
     a0e:	df 2e       	mov	r13, r31
     a10:	f0 2d       	mov	r31, r0
     a12:	60 e1       	ldi	r22, 0x10	; 16
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     a1e:	68 83       	st	Y, r22
     a20:	79 83       	std	Y+1, r23	; 0x01
     a22:	8a 83       	std	Y+2, r24	; 0x02
     a24:	9b 83       	std	Y+3, r25	; 0x03
					break;
     a26:	6a c2       	rjmp	.+1236   	; 0xefc <__stack+0x5fd>
				}
				case SUB: /* Performs subtraction with a CPU register. */
				{
					reg[op1] = alu(SUB, reg[op1], reg[op2], &sr);
     a28:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     a2c:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     a30:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     a34:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ec 5f       	subi	r30, 0xFC	; 252
     a42:	fe 4f       	sbci	r31, 0xFE	; 254
     a44:	e0 80       	ld	r14, Z
     a46:	f1 80       	ldd	r15, Z+1	; 0x01
     a48:	02 81       	ldd	r16, Z+2	; 0x02
     a4a:	13 81       	ldd	r17, Z+3	; 0x03
     a4c:	cc 0f       	add	r28, r28
     a4e:	dd 1f       	adc	r29, r29
     a50:	cc 0f       	add	r28, r28
     a52:	dd 1f       	adc	r29, r29
     a54:	cc 5f       	subi	r28, 0xFC	; 252
     a56:	de 4f       	sbci	r29, 0xFE	; 254
     a58:	28 81       	ld	r18, Y
     a5a:	39 81       	ldd	r19, Y+1	; 0x01
     a5c:	4a 81       	ldd	r20, Y+2	; 0x02
     a5e:	5b 81       	ldd	r21, Y+3	; 0x03
     a60:	0f 2e       	mov	r0, r31
     a62:	fd e8       	ldi	r31, 0x8D	; 141
     a64:	cf 2e       	mov	r12, r31
     a66:	f1 e0       	ldi	r31, 0x01	; 1
     a68:	df 2e       	mov	r13, r31
     a6a:	f0 2d       	mov	r31, r0
     a6c:	61 e1       	ldi	r22, 0x11	; 17
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     a78:	68 83       	st	Y, r22
     a7a:	79 83       	std	Y+1, r23	; 0x01
     a7c:	8a 83       	std	Y+2, r24	; 0x02
     a7e:	9b 83       	std	Y+3, r25	; 0x03
					break;
     a80:	3d c2       	rjmp	.+1146   	; 0xefc <__stack+0x5fd>
				}
				case INC: /* Increments content of a CPU register. */
				{
					reg[op1] = alu(ADD, reg[op1], 1, &sr);
     a82:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     a86:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     a8a:	cc 0f       	add	r28, r28
     a8c:	dd 1f       	adc	r29, r29
     a8e:	cc 0f       	add	r28, r28
     a90:	dd 1f       	adc	r29, r29
     a92:	cc 5f       	subi	r28, 0xFC	; 252
     a94:	de 4f       	sbci	r29, 0xFE	; 254
     a96:	28 81       	ld	r18, Y
     a98:	39 81       	ldd	r19, Y+1	; 0x01
     a9a:	4a 81       	ldd	r20, Y+2	; 0x02
     a9c:	5b 81       	ldd	r21, Y+3	; 0x03
     a9e:	0f 2e       	mov	r0, r31
     aa0:	fd e8       	ldi	r31, 0x8D	; 141
     aa2:	cf 2e       	mov	r12, r31
     aa4:	f1 e0       	ldi	r31, 0x01	; 1
     aa6:	df 2e       	mov	r13, r31
     aa8:	f0 2d       	mov	r31, r0
     aaa:	e1 2c       	mov	r14, r1
     aac:	f1 2c       	mov	r15, r1
     aae:	87 01       	movw	r16, r14
     ab0:	e3 94       	inc	r14
     ab2:	60 e1       	ldi	r22, 0x10	; 16
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     abe:	68 83       	st	Y, r22
     ac0:	79 83       	std	Y+1, r23	; 0x01
     ac2:	8a 83       	std	Y+2, r24	; 0x02
     ac4:	9b 83       	std	Y+3, r25	; 0x03
					break;
     ac6:	1a c2       	rjmp	.+1076   	; 0xefc <__stack+0x5fd>
				}
				case DEC: /* Decrements content of a CPU register. */
				{
					reg[op1] = alu(SUB, reg[op1], 1, &sr);
     ac8:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     acc:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     ad0:	cc 0f       	add	r28, r28
     ad2:	dd 1f       	adc	r29, r29
     ad4:	cc 0f       	add	r28, r28
     ad6:	dd 1f       	adc	r29, r29
     ad8:	cc 5f       	subi	r28, 0xFC	; 252
     ada:	de 4f       	sbci	r29, 0xFE	; 254
     adc:	28 81       	ld	r18, Y
     ade:	39 81       	ldd	r19, Y+1	; 0x01
     ae0:	4a 81       	ldd	r20, Y+2	; 0x02
     ae2:	5b 81       	ldd	r21, Y+3	; 0x03
     ae4:	0f 2e       	mov	r0, r31
     ae6:	fd e8       	ldi	r31, 0x8D	; 141
     ae8:	cf 2e       	mov	r12, r31
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	df 2e       	mov	r13, r31
     aee:	f0 2d       	mov	r31, r0
     af0:	e1 2c       	mov	r14, r1
     af2:	f1 2c       	mov	r15, r1
     af4:	87 01       	movw	r16, r14
     af6:	e3 94       	inc	r14
     af8:	61 e1       	ldi	r22, 0x11	; 17
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
     b04:	68 83       	st	Y, r22
     b06:	79 83       	std	Y+1, r23	; 0x01
     b08:	8a 83       	std	Y+2, r24	; 0x02
     b0a:	9b 83       	std	Y+3, r25	; 0x03
					break;
     b0c:	f7 c1       	rjmp	.+1006   	; 0xefc <__stack+0x5fd>
				}
				case CPI: /* Compares content between CPU register with a constant. */
				{
					(void)alu(SUB, reg[op1], op2, &sr); /* Return value is not stored. */
     b0e:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     b12:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ec 5f       	subi	r30, 0xFC	; 252
     b20:	fe 4f       	sbci	r31, 0xFE	; 254
     b22:	20 81       	ld	r18, Z
     b24:	31 81       	ldd	r19, Z+1	; 0x01
     b26:	42 81       	ldd	r20, Z+2	; 0x02
     b28:	53 81       	ldd	r21, Z+3	; 0x03
     b2a:	e0 90 85 01 	lds	r14, 0x0185	; 0x800185 <op2>
     b2e:	f0 90 86 01 	lds	r15, 0x0186	; 0x800186 <op2+0x1>
     b32:	00 91 87 01 	lds	r16, 0x0187	; 0x800187 <op2+0x2>
     b36:	10 91 88 01 	lds	r17, 0x0188	; 0x800188 <op2+0x3>
     b3a:	0f 2e       	mov	r0, r31
     b3c:	fd e8       	ldi	r31, 0x8D	; 141
     b3e:	cf 2e       	mov	r12, r31
     b40:	f1 e0       	ldi	r31, 0x01	; 1
     b42:	df 2e       	mov	r13, r31
     b44:	f0 2d       	mov	r31, r0
     b46:	61 e1       	ldi	r22, 0x11	; 17
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
					break;
     b52:	d4 c1       	rjmp	.+936    	; 0xefc <__stack+0x5fd>
				}
				case CP: /* Compares content between two CPU registers. */
				{
					(void)alu(SUB, reg[op1], reg[op2], &sr); /* Return value is not stored. */
     b54:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     b58:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ec 5f       	subi	r30, 0xFC	; 252
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	e0 80       	ld	r14, Z
     b6a:	f1 80       	ldd	r15, Z+1	; 0x01
     b6c:	02 81       	ldd	r16, Z+2	; 0x02
     b6e:	13 81       	ldd	r17, Z+3	; 0x03
     b70:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     b74:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ec 5f       	subi	r30, 0xFC	; 252
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	20 81       	ld	r18, Z
     b86:	31 81       	ldd	r19, Z+1	; 0x01
     b88:	42 81       	ldd	r20, Z+2	; 0x02
     b8a:	53 81       	ldd	r21, Z+3	; 0x03
     b8c:	0f 2e       	mov	r0, r31
     b8e:	fd e8       	ldi	r31, 0x8D	; 141
     b90:	cf 2e       	mov	r12, r31
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	df 2e       	mov	r13, r31
     b96:	f0 2d       	mov	r31, r0
     b98:	61 e1       	ldi	r22, 0x11	; 17
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 72 00 	call	0xe4	; 0xe4 <alu>
					break;
     ba4:	ab c1       	rjmp	.+854    	; 0xefc <__stack+0x5fd>
				}
				case JMP: /* Jumps to specified address. */
				{
					pc = op1;
     ba6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     baa:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     bae:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     bb2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
					break;
     bb6:	a2 c1       	rjmp	.+836    	; 0xefc <__stack+0x5fd>
				}
				case BREQ: /* Branches to specified address i Z flag is set. */
				{
					if (read(sr, Z)) pc = op1;
     bb8:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     bbc:	82 ff       	sbrs	r24, 2
     bbe:	9e c1       	rjmp	.+828    	; 0xefc <__stack+0x5fd>
     bc0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     bc4:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     bc8:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     bcc:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     bd0:	95 c1       	rjmp	.+810    	; 0xefc <__stack+0x5fd>
					break;
				}
				case BRNE: /* Branches to specified address if Z flag is cleared. */
				{
					if (!read(sr, Z)) pc = op1;
     bd2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     bd6:	82 fd       	sbrc	r24, 2
     bd8:	91 c1       	rjmp	.+802    	; 0xefc <__stack+0x5fd>
     bda:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     bde:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     be2:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     be6:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     bea:	88 c1       	rjmp	.+784    	; 0xefc <__stack+0x5fd>
					break;
				}
				case BRGE: /* Branches to specified address if S flag is cleared. */
				{
					if (!read(sr, S)) pc = op1;
     bec:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     bf0:	84 fd       	sbrc	r24, 4
     bf2:	84 c1       	rjmp	.+776    	; 0xefc <__stack+0x5fd>
     bf4:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     bf8:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     bfc:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     c00:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     c04:	7b c1       	rjmp	.+758    	; 0xefc <__stack+0x5fd>
					break;
				}
				case BRGT: /* Branches to specified address if both S and Z flags are cleared. */
				{
					if (!read(sr, S) && !read(sr, Z)) pc = op1;
     c06:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     c0a:	84 fd       	sbrc	r24, 4
     c0c:	77 c1       	rjmp	.+750    	; 0xefc <__stack+0x5fd>
     c0e:	82 fd       	sbrc	r24, 2
     c10:	75 c1       	rjmp	.+746    	; 0xefc <__stack+0x5fd>
     c12:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     c16:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     c1a:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     c1e:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     c22:	6c c1       	rjmp	.+728    	; 0xefc <__stack+0x5fd>
					break;
				}
				case BRLE: /* Branches to specified address if S or Z flag is set. */
				{
					if (read(sr, S) || read(sr, Z)) pc = op1;
     c24:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     c28:	84 fd       	sbrc	r24, 4
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <__stack+0x331>
     c2c:	82 ff       	sbrs	r24, 2
     c2e:	66 c1       	rjmp	.+716    	; 0xefc <__stack+0x5fd>
     c30:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     c34:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     c38:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     c3c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     c40:	5d c1       	rjmp	.+698    	; 0xefc <__stack+0x5fd>
					break;
				}
				case BRLT: /* Branches to specified address if S flag is set. */
				{
					if (read(sr, S)) pc = op1;
     c42:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     c46:	84 ff       	sbrs	r24, 4
     c48:	59 c1       	rjmp	.+690    	; 0xefc <__stack+0x5fd>
     c4a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     c4e:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     c52:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     c56:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
     c5a:	50 c1       	rjmp	.+672    	; 0xefc <__stack+0x5fd>
					break;
				}
				case CALL: /* Stores the return address on the stack and jumps to specified address. */
				{
					stack_push(pc);
     c5c:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <pc>
     c60:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <pc+0x1>
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <stack_push>
					pc = op1;
     c6c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <op1>
     c70:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <op1+0x1>
     c74:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <pc+0x1>
     c78:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <pc>
					break;
     c7c:	3f c1       	rjmp	.+638    	; 0xefc <__stack+0x5fd>
				}
				case RET: /* Jumps to return address stored on the stack. */
				{
					pc = stack_pop();
     c7e:	0e 94 16 09 	call	0x122c	; 0x122c <stack_pop>
     c82:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <pc+0x1>
     c86:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <pc>
					break;
     c8a:	38 c1       	rjmp	.+624    	; 0xefc <__stack+0x5fd>
				}
				case RETI: /* Pops the return address from the stack and sets the global interrupt flag. */
				{
					pc = stack_pop();
     c8c:	0e 94 16 09 	call	0x122c	; 0x122c <stack_pop>
     c90:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <pc+0x1>
     c94:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <pc>
					set(sr, I);
     c98:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     c9c:	80 62       	ori	r24, 0x20	; 32
     c9e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
					break;
     ca2:	2c c1       	rjmp	.+600    	; 0xefc <__stack+0x5fd>
				}
				case PUSH: /* Stores content of specified CPU register on the stack. */
				{
					stack_push(reg[op1]);
     ca4:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     ca8:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	ec 5f       	subi	r30, 0xFC	; 252
     cb6:	fe 4f       	sbci	r31, 0xFE	; 254
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <stack_push>
					break;
     cc4:	1b c1       	rjmp	.+566    	; 0xefc <__stack+0x5fd>
				}
				case POP: /* Loads value from the stack to a CPU-register. */
				{
					reg[op1] = stack_pop();
     cc6:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     cca:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     cce:	0e 94 16 09 	call	0x122c	; 0x122c <stack_pop>
     cd2:	cc 0f       	add	r28, r28
     cd4:	dd 1f       	adc	r29, r29
     cd6:	cc 0f       	add	r28, r28
     cd8:	dd 1f       	adc	r29, r29
     cda:	cc 5f       	subi	r28, 0xFC	; 252
     cdc:	de 4f       	sbci	r29, 0xFE	; 254
     cde:	68 83       	st	Y, r22
     ce0:	79 83       	std	Y+1, r23	; 0x01
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	9b 83       	std	Y+3, r25	; 0x03
					break;
     ce6:	0a c1       	rjmp	.+532    	; 0xefc <__stack+0x5fd>
				}
				case LSL: /* Shifts content of CPU register on step to the left. */
				{
					reg[op1] = reg[op1] << 1;
     ce8:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     cec:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	ec 5f       	subi	r30, 0xFC	; 252
     cfa:	fe 4f       	sbci	r31, 0xFE	; 254
     cfc:	80 81       	ld	r24, Z
     cfe:	91 81       	ldd	r25, Z+1	; 0x01
     d00:	a2 81       	ldd	r26, Z+2	; 0x02
     d02:	b3 81       	ldd	r27, Z+3	; 0x03
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	aa 1f       	adc	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	80 83       	st	Z, r24
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	a2 83       	std	Z+2, r26	; 0x02
     d12:	b3 83       	std	Z+3, r27	; 0x03
					break;
     d14:	f3 c0       	rjmp	.+486    	; 0xefc <__stack+0x5fd>
				}
				case LSR: /* Shifts content of CPU register on step to the right. */
				{
					reg[op1] = reg[op1] >> 1;
     d16:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <op1>
     d1a:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <op1+0x1>
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ec 5f       	subi	r30, 0xFC	; 252
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	a2 81       	ldd	r26, Z+2	; 0x02
     d30:	b3 81       	ldd	r27, Z+3	; 0x03
     d32:	b6 95       	lsr	r27
     d34:	a7 95       	ror	r26
     d36:	97 95       	ror	r25
     d38:	87 95       	ror	r24
     d3a:	80 83       	st	Z, r24
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	a2 83       	std	Z+2, r26	; 0x02
     d40:	b3 83       	std	Z+3, r27	; 0x03
					break;
     d42:	dc c0       	rjmp	.+440    	; 0xefc <__stack+0x5fd>
				}
				case SEI: /* Sets the global interrupt flag in the status register. */
				{
					set(sr, I);
     d44:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     d48:	80 62       	ori	r24, 0x20	; 32
     d4a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
					break;
     d4e:	d6 c0       	rjmp	.+428    	; 0xefc <__stack+0x5fd>
				}
				case CLI: /* Clears the global interrupt flag in the status register. */
				{
					clr(sr, I);
     d50:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <sr>
     d54:	8f 7d       	andi	r24, 0xDF	; 223
     d56:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <sr>
					break;
     d5a:	d0 c0       	rjmp	.+416    	; 0xefc <__stack+0x5fd>
				}
				case STIO:  /* Stores value to referenced I/O location (no offset). */
				{
					const uint16_t address = reg[op1] | (reg[op1 + 1] << 8);
     d5c:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <op1>
     d60:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <op1+0x1>
     d64:	f9 01       	movw	r30, r18
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	ec 5f       	subi	r30, 0xFC	; 252
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	a2 81       	ldd	r26, Z+2	; 0x02
     d78:	b3 81       	ldd	r27, Z+3	; 0x03
     d7a:	f9 01       	movw	r30, r18
     d7c:	31 96       	adiw	r30, 0x01	; 1
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	ec 5f       	subi	r30, 0xFC	; 252
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	62 81       	ldd	r22, Z+2	; 0x02
     d90:	73 81       	ldd	r23, Z+3	; 0x03
     d92:	54 2f       	mov	r21, r20
     d94:	44 27       	eor	r20, r20
     d96:	84 2b       	or	r24, r20
     d98:	95 2b       	or	r25, r21
					data_memory_write(address, reg[op2]);
     d9a:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     d9e:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	ec 5f       	subi	r30, 0xFC	; 252
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	40 81       	ld	r20, Z
     db0:	51 81       	ldd	r21, Z+1	; 0x01
     db2:	62 81       	ldd	r22, Z+2	; 0x02
     db4:	73 81       	ldd	r23, Z+3	; 0x03
     db6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
					break;
     dba:	a0 c0       	rjmp	.+320    	; 0xefc <__stack+0x5fd>
				}
				case LDIO: /* Loads value from referenced I/O location (no offset). */
				{
					const uint16_t address = reg[op2] | (reg[op2 + 1] << 8);
     dbc:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <op2>
     dc0:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <op2+0x1>
     dc4:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <op2+0x2>
     dc8:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <op2+0x3>
     dcc:	fa 01       	movw	r30, r20
     dce:	ee 0f       	add	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	ee 0f       	add	r30, r30
     dd4:	ff 1f       	adc	r31, r31
     dd6:	ec 5f       	subi	r30, 0xFC	; 252
     dd8:	fe 4f       	sbci	r31, 0xFE	; 254
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	a2 81       	ldd	r26, Z+2	; 0x02
     de0:	b3 81       	ldd	r27, Z+3	; 0x03
     de2:	4f 5f       	subi	r20, 0xFF	; 255
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	6f 4f       	sbci	r22, 0xFF	; 255
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	44 0f       	add	r20, r20
     df0:	55 1f       	adc	r21, r21
     df2:	fa 01       	movw	r30, r20
     df4:	ec 5f       	subi	r30, 0xFC	; 252
     df6:	fe 4f       	sbci	r31, 0xFE	; 254
     df8:	40 81       	ld	r20, Z
     dfa:	51 81       	ldd	r21, Z+1	; 0x01
     dfc:	62 81       	ldd	r22, Z+2	; 0x02
     dfe:	73 81       	ldd	r23, Z+3	; 0x03
     e00:	54 2f       	mov	r21, r20
     e02:	44 27       	eor	r20, r20
     e04:	84 2b       	or	r24, r20
     e06:	95 2b       	or	r25, r21
					reg[op1] = data_memory_read(address);
     e08:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     e0c:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     e10:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     e14:	cc 0f       	add	r28, r28
     e16:	dd 1f       	adc	r29, r29
     e18:	cc 0f       	add	r28, r28
     e1a:	dd 1f       	adc	r29, r29
     e1c:	cc 5f       	subi	r28, 0xFC	; 252
     e1e:	de 4f       	sbci	r29, 0xFE	; 254
     e20:	68 83       	st	Y, r22
     e22:	79 83       	std	Y+1, r23	; 0x01
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	9b 83       	std	Y+3, r25	; 0x03
					break;
     e28:	69 c0       	rjmp	.+210    	; 0xefc <__stack+0x5fd>
				}
				case ST: /* Stores value to referenced data location (offset = 256). */
				{
					const uint16_t address = reg[op1] | (reg[op1 + 1] << 8);
     e2a:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <op1>
     e2e:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <op1+0x1>
     e32:	f9 01       	movw	r30, r18
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	ec 5f       	subi	r30, 0xFC	; 252
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	a2 81       	ldd	r26, Z+2	; 0x02
     e46:	b3 81       	ldd	r27, Z+3	; 0x03
     e48:	f9 01       	movw	r30, r18
     e4a:	31 96       	adiw	r30, 0x01	; 1
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	ec 5f       	subi	r30, 0xFC	; 252
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	40 81       	ld	r20, Z
     e5a:	51 81       	ldd	r21, Z+1	; 0x01
     e5c:	62 81       	ldd	r22, Z+2	; 0x02
     e5e:	73 81       	ldd	r23, Z+3	; 0x03
     e60:	54 2f       	mov	r21, r20
     e62:	44 27       	eor	r20, r20
     e64:	84 2b       	or	r24, r20
     e66:	95 2b       	or	r25, r21
					data_memory_write(address, reg[op2]);
     e68:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <op2>
     e6c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <op2+0x1>
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	ec 5f       	subi	r30, 0xFC	; 252
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	40 81       	ld	r20, Z
     e7e:	51 81       	ldd	r21, Z+1	; 0x01
     e80:	62 81       	ldd	r22, Z+2	; 0x02
     e82:	73 81       	ldd	r23, Z+3	; 0x03
     e84:	0e 94 a6 07 	call	0xf4c	; 0xf4c <data_memory_write>
					break;
     e88:	39 c0       	rjmp	.+114    	; 0xefc <__stack+0x5fd>
				}
				case LD: /* Loads value from referenced data location (offset = 256). */
				{
					const uint16_t address = reg[op2] | (reg[op2 + 1] << 8);
     e8a:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <op2>
     e8e:	50 91 86 01 	lds	r21, 0x0186	; 0x800186 <op2+0x1>
     e92:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <op2+0x2>
     e96:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <op2+0x3>
     e9a:	fa 01       	movw	r30, r20
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	ec 5f       	subi	r30, 0xFC	; 252
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	a2 81       	ldd	r26, Z+2	; 0x02
     eae:	b3 81       	ldd	r27, Z+3	; 0x03
     eb0:	4f 5f       	subi	r20, 0xFF	; 255
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
     eb4:	6f 4f       	sbci	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	44 0f       	add	r20, r20
     eba:	55 1f       	adc	r21, r21
     ebc:	44 0f       	add	r20, r20
     ebe:	55 1f       	adc	r21, r21
     ec0:	fa 01       	movw	r30, r20
     ec2:	ec 5f       	subi	r30, 0xFC	; 252
     ec4:	fe 4f       	sbci	r31, 0xFE	; 254
     ec6:	40 81       	ld	r20, Z
     ec8:	51 81       	ldd	r21, Z+1	; 0x01
     eca:	62 81       	ldd	r22, Z+2	; 0x02
     ecc:	73 81       	ldd	r23, Z+3	; 0x03
     ece:	54 2f       	mov	r21, r20
     ed0:	44 27       	eor	r20, r20
     ed2:	84 2b       	or	r24, r20
     ed4:	95 2b       	or	r25, r21
					reg[op1] = data_memory_read(address);
     ed6:	c0 91 89 01 	lds	r28, 0x0189	; 0x800189 <op1>
     eda:	d0 91 8a 01 	lds	r29, 0x018A	; 0x80018a <op1+0x1>
     ede:	0e 94 bb 07 	call	0xf76	; 0xf76 <data_memory_read>
     ee2:	cc 0f       	add	r28, r28
     ee4:	dd 1f       	adc	r29, r29
     ee6:	cc 0f       	add	r28, r28
     ee8:	dd 1f       	adc	r29, r29
     eea:	cc 5f       	subi	r28, 0xFC	; 252
     eec:	de 4f       	sbci	r29, 0xFE	; 254
     eee:	68 83       	st	Y, r22
     ef0:	79 83       	std	Y+1, r23	; 0x01
     ef2:	8a 83       	std	Y+2, r24	; 0x02
     ef4:	9b 83       	std	Y+3, r25	; 0x03
					break;
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <__stack+0x5fd>
				}
				default:
				{
					control_unit_reset(); /* System reset if error occurs. */
     ef8:	0e 94 19 02 	call	0x432	; 0x432 <control_unit_reset>
					break;
				}
			}

			state = CPU_STATE_FETCH;    /* Fetches next instruction during next clock cycle. */
     efc:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <state>
			check_for_irq();            /* Checks for interrupt request after each execute cycle. */
     f00:	0e 94 f6 01 	call	0x3ec	; 0x3ec <check_for_irq>
			break;
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <__stack+0x60b>
		}
		default:                       /* System reset if error occurs. */
		{
			control_unit_reset();
     f06:	0e 94 19 02 	call	0x432	; 0x432 <control_unit_reset>
			break;
		}
	}

	control_unit_io_update();
     f0a:	0e 94 1c 01 	call	0x238	; 0x238 <control_unit_io_update>
	monitor_interrupts();            /* Monitors interrupts each clock cycle. */
     f0e:	0e 94 66 01 	call	0x2cc	; 0x2cc <monitor_interrupts>
	return;
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	08 95       	ret

00000f24 <data_memory_reset>:
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
   for (uint16_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0c c0       	rjmp	.+24     	; 0xf42 <data_memory_reset+0x1e>
   {
      data[i] = 0x00;
     f2a:	fc 01       	movw	r30, r24
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	e8 56       	subi	r30, 0x68	; 104
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	10 82       	st	Z, r1
     f3a:	11 82       	std	Z+1, r1	; 0x01
     f3c:	12 82       	std	Z+2, r1	; 0x02
     f3e:	13 82       	std	Z+3, r1	; 0x03
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
   for (uint16_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	8c 32       	cpi	r24, 0x2C	; 44
     f44:	21 e0       	ldi	r18, 0x01	; 1
     f46:	92 07       	cpc	r25, r18
     f48:	80 f3       	brcs	.-32     	; 0xf2a <data_memory_reset+0x6>
   {
      data[i] = 0x00;
   }
   return;
}
     f4a:	08 95       	ret

00000f4c <data_memory_write>:
*                    - value  : The 8-bit value to write to data memory.
********************************************************************************/
int data_memory_write(const uint16_t address,
                      const uint32_t value)
{
   if (address < DATA_MEMORY_ADDRESS_WIDTH)
     f4c:	8c 32       	cpi	r24, 0x2C	; 44
     f4e:	21 e0       	ldi	r18, 0x01	; 1
     f50:	92 07       	cpc	r25, r18
     f52:	70 f4       	brcc	.+28     	; 0xf70 <data_memory_write+0x24>
   {
      data[address] = value;
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	fc 01       	movw	r30, r24
     f5e:	e8 56       	subi	r30, 0x68	; 104
     f60:	fe 4f       	sbci	r31, 0xFE	; 254
     f62:	40 83       	st	Z, r20
     f64:	51 83       	std	Z+1, r21	; 0x01
     f66:	62 83       	std	Z+2, r22	; 0x02
     f68:	73 83       	std	Z+3, r23	; 0x03
      return 0;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	08 95       	ret
   }
   else
   {
      return 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
   }
}
     f74:	08 95       	ret

00000f76 <data_memory_read>:
*
*                   - address: Read location in data memory.
********************************************************************************/
uint32_t data_memory_read(const uint16_t address)
{
   if (address < DATA_MEMORY_ADDRESS_WIDTH)
     f76:	8c 32       	cpi	r24, 0x2C	; 44
     f78:	21 e0       	ldi	r18, 0x01	; 1
     f7a:	92 07       	cpc	r25, r18
     f7c:	60 f4       	brcc	.+24     	; 0xf96 <data_memory_read+0x20>
   {
      return data[address];
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	fc 01       	movw	r30, r24
     f88:	e8 56       	subi	r30, 0x68	; 104
     f8a:	fe 4f       	sbci	r31, 0xFE	; 254
     f8c:	60 81       	ld	r22, Z
     f8e:	71 81       	ldd	r23, Z+1	; 0x01
     f90:	82 81       	ldd	r24, Z+2	; 0x02
     f92:	93 81       	ldd	r25, Z+3	; 0x03
     f94:	08 95       	ret
   }
   else
   {
      return 0x00;
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	cb 01       	movw	r24, r22
   }
     f9c:	08 95       	ret

00000f9e <main>:
/********************************************************************************
* main: Controls the program flow of an 8-bit processor by keyboard input.
********************************************************************************/
int main(void)
{
	control_unit_reset();
     f9e:	0e 94 19 02 	call	0x432	; 0x432 <control_unit_reset>
	
	while (1)
	{
		control_unit_run_next_state();
     fa2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <control_unit_run_next_state>
     fa6:	fd cf       	rjmp	.-6      	; 0xfa2 <main+0x4>

00000fa8 <program_memory_write>:
*                       should be called once when the program starts.
********************************************************************************/
void program_memory_write(void)
{
	static bool program_memory_initialized = false;
	if (program_memory_initialized) return;
     fa8:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <program_memory_initialized.1982>
     fac:	81 11       	cpse	r24, r1
     fae:	cf c0       	rjmp	.+414    	; 0x114e <program_memory_write+0x1a6>
	
	program_memory[0]  = assemble(JMP, main, 0x00);
     fb0:	e9 e4       	ldi	r30, 0x49	; 73
     fb2:	f6 e0       	ldi	r31, 0x06	; 6
     fb4:	10 82       	st	Z, r1
     fb6:	11 82       	std	Z+1, r1	; 0x01
     fb8:	12 82       	std	Z+2, r1	; 0x02
     fba:	13 82       	std	Z+3, r1	; 0x03
     fbc:	64 e0       	ldi	r22, 0x04	; 4
     fbe:	64 83       	std	Z+4, r22	; 0x04
     fc0:	15 82       	std	Z+5, r1	; 0x05
     fc2:	86 e1       	ldi	r24, 0x16	; 22
     fc4:	86 83       	std	Z+6, r24	; 0x06
     fc6:	17 82       	std	Z+7, r1	; 0x07
	program_memory[1]  = assemble(NOP, 0x00, 0x00);
     fc8:	10 86       	std	Z+8, r1	; 0x08
     fca:	11 86       	std	Z+9, r1	; 0x09
     fcc:	12 86       	std	Z+10, r1	; 0x0a
     fce:	13 86       	std	Z+11, r1	; 0x0b
     fd0:	14 86       	std	Z+12, r1	; 0x0c
     fd2:	15 86       	std	Z+13, r1	; 0x0d
     fd4:	16 86       	std	Z+14, r1	; 0x0e
     fd6:	17 86       	std	Z+15, r1	; 0x0f
	program_memory[2]  = assemble(JMP, ISR_PCINT, 0x00);
     fd8:	10 8a       	std	Z+16, r1	; 0x10
     fda:	11 8a       	std	Z+17, r1	; 0x11
     fdc:	12 8a       	std	Z+18, r1	; 0x12
     fde:	13 8a       	std	Z+19, r1	; 0x13
     fe0:	9f e0       	ldi	r25, 0x0F	; 15
     fe2:	94 8b       	std	Z+20, r25	; 0x14
     fe4:	15 8a       	std	Z+21, r1	; 0x15
     fe6:	86 8b       	std	Z+22, r24	; 0x16
     fe8:	17 8a       	std	Z+23, r1	; 0x17
	program_memory[3]  = assemble(NOP, 0x00, 0x00);
     fea:	10 8e       	std	Z+24, r1	; 0x18
     fec:	11 8e       	std	Z+25, r1	; 0x19
     fee:	12 8e       	std	Z+26, r1	; 0x1a
     ff0:	13 8e       	std	Z+27, r1	; 0x1b
     ff2:	14 8e       	std	Z+28, r1	; 0x1c
     ff4:	15 8e       	std	Z+29, r1	; 0x1d
     ff6:	16 8e       	std	Z+30, r1	; 0x1e
     ff8:	17 8e       	std	Z+31, r1	; 0x1f

	program_memory[4]  = assemble(CALL, setup, 0x00);
     ffa:	10 a2       	std	Z+32, r1	; 0x20
     ffc:	11 a2       	std	Z+33, r1	; 0x21
     ffe:	12 a2       	std	Z+34, r1	; 0x22
    1000:	13 a2       	std	Z+35, r1	; 0x23
    1002:	96 e0       	ldi	r25, 0x06	; 6
    1004:	94 a3       	std	Z+36, r25	; 0x24
    1006:	15 a2       	std	Z+37, r1	; 0x25
    1008:	9d e1       	ldi	r25, 0x1D	; 29
    100a:	96 a3       	std	Z+38, r25	; 0x26
    100c:	17 a2       	std	Z+39, r1	; 0x27
	program_memory[5]  = assemble(JMP, main_loop, 0x00);
    100e:	10 a6       	std	Z+40, r1	; 0x28
    1010:	11 a6       	std	Z+41, r1	; 0x29
    1012:	12 a6       	std	Z+42, r1	; 0x2a
    1014:	13 a6       	std	Z+43, r1	; 0x2b
    1016:	75 e0       	ldi	r23, 0x05	; 5
    1018:	74 a7       	std	Z+44, r23	; 0x2c
    101a:	15 a6       	std	Z+45, r1	; 0x2d
    101c:	86 a7       	std	Z+46, r24	; 0x2e
    101e:	17 a6       	std	Z+47, r1	; 0x2f
	
	program_memory[6]  = assemble(LDI, R16, (1 << LED1));
    1020:	10 aa       	std	Z+48, r1	; 0x30
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	81 ab       	std	Z+49, r24	; 0x31
    1026:	12 aa       	std	Z+50, r1	; 0x32
    1028:	13 aa       	std	Z+51, r1	; 0x33
    102a:	30 e1       	ldi	r19, 0x10	; 16
    102c:	34 ab       	std	Z+52, r19	; 0x34
    102e:	15 aa       	std	Z+53, r1	; 0x35
    1030:	86 ab       	std	Z+54, r24	; 0x36
    1032:	17 aa       	std	Z+55, r1	; 0x37
	program_memory[7]  = assemble(OUT, DDRA, R16);
    1034:	30 af       	std	Z+56, r19	; 0x38
    1036:	11 ae       	std	Z+57, r1	; 0x39
    1038:	12 ae       	std	Z+58, r1	; 0x3a
    103a:	13 ae       	std	Z+59, r1	; 0x3b
    103c:	14 ae       	std	Z+60, r1	; 0x3c
    103e:	15 ae       	std	Z+61, r1	; 0x3d
    1040:	93 e0       	ldi	r25, 0x03	; 3
    1042:	96 af       	std	Z+62, r25	; 0x3e
    1044:	17 ae       	std	Z+63, r1	; 0x3f
	program_memory[8]  = assemble(LDI, R17, (1 << BUTTON1));
    1046:	e9 e8       	ldi	r30, 0x89	; 137
    1048:	f6 e0       	ldi	r31, 0x06	; 6
    104a:	10 82       	st	Z, r1
    104c:	58 e0       	ldi	r21, 0x08	; 8
    104e:	51 83       	std	Z+1, r21	; 0x01
    1050:	12 82       	std	Z+2, r1	; 0x02
    1052:	13 82       	std	Z+3, r1	; 0x03
    1054:	41 e1       	ldi	r20, 0x11	; 17
    1056:	44 83       	std	Z+4, r20	; 0x04
    1058:	15 82       	std	Z+5, r1	; 0x05
    105a:	86 83       	std	Z+6, r24	; 0x06
    105c:	17 82       	std	Z+7, r1	; 0x07
	program_memory[9]  = assemble(OUT, PORTA, R17);
    105e:	e1 e9       	ldi	r30, 0x91	; 145
    1060:	f6 e0       	ldi	r31, 0x06	; 6
    1062:	40 83       	st	Z, r20
    1064:	11 82       	std	Z+1, r1	; 0x01
    1066:	12 82       	std	Z+2, r1	; 0x02
    1068:	13 82       	std	Z+3, r1	; 0x03
    106a:	84 83       	std	Z+4, r24	; 0x04
    106c:	15 82       	std	Z+5, r1	; 0x05
    106e:	96 83       	std	Z+6, r25	; 0x06
    1070:	17 82       	std	Z+7, r1	; 0x07
	program_memory[10] = assemble(SEI, 0x00, 0x00);
    1072:	e9 e9       	ldi	r30, 0x99	; 153
    1074:	f6 e0       	ldi	r31, 0x06	; 6
    1076:	10 82       	st	Z, r1
    1078:	11 82       	std	Z+1, r1	; 0x01
    107a:	12 82       	std	Z+2, r1	; 0x02
    107c:	13 82       	std	Z+3, r1	; 0x03
    107e:	14 82       	std	Z+4, r1	; 0x04
    1080:	15 82       	std	Z+5, r1	; 0x05
    1082:	24 e2       	ldi	r18, 0x24	; 36
    1084:	26 83       	std	Z+6, r18	; 0x06
    1086:	17 82       	std	Z+7, r1	; 0x07
	program_memory[11] = assemble(LDI, R24, (1 << PCIEA));
    1088:	e1 ea       	ldi	r30, 0xA1	; 161
    108a:	f6 e0       	ldi	r31, 0x06	; 6
    108c:	80 83       	st	Z, r24
    108e:	11 82       	std	Z+1, r1	; 0x01
    1090:	12 82       	std	Z+2, r1	; 0x02
    1092:	13 82       	std	Z+3, r1	; 0x03
    1094:	28 e1       	ldi	r18, 0x18	; 24
    1096:	24 83       	std	Z+4, r18	; 0x04
    1098:	15 82       	std	Z+5, r1	; 0x05
    109a:	86 83       	std	Z+6, r24	; 0x06
    109c:	17 82       	std	Z+7, r1	; 0x07
	program_memory[12] = assemble(OUT, ICR, R24);
    109e:	e9 ea       	ldi	r30, 0xA9	; 169
    10a0:	f6 e0       	ldi	r31, 0x06	; 6
    10a2:	20 83       	st	Z, r18
    10a4:	11 82       	std	Z+1, r1	; 0x01
    10a6:	12 82       	std	Z+2, r1	; 0x02
    10a8:	13 82       	std	Z+3, r1	; 0x03
    10aa:	94 83       	std	Z+4, r25	; 0x04
    10ac:	15 82       	std	Z+5, r1	; 0x05
    10ae:	96 83       	std	Z+6, r25	; 0x06
    10b0:	17 82       	std	Z+7, r1	; 0x07
	program_memory[13] = assemble(OUT, PCMSKA, R17);
    10b2:	e1 eb       	ldi	r30, 0xB1	; 177
    10b4:	f6 e0       	ldi	r31, 0x06	; 6
    10b6:	40 83       	st	Z, r20
    10b8:	11 82       	std	Z+1, r1	; 0x01
    10ba:	12 82       	std	Z+2, r1	; 0x02
    10bc:	13 82       	std	Z+3, r1	; 0x03
    10be:	74 83       	std	Z+4, r23	; 0x04
    10c0:	15 82       	std	Z+5, r1	; 0x05
    10c2:	96 83       	std	Z+6, r25	; 0x06
    10c4:	17 82       	std	Z+7, r1	; 0x07
	program_memory[14] = assemble(RET, 0x00, 0x00);
    10c6:	e9 eb       	ldi	r30, 0xB9	; 185
    10c8:	f6 e0       	ldi	r31, 0x06	; 6
    10ca:	10 82       	st	Z, r1
    10cc:	11 82       	std	Z+1, r1	; 0x01
    10ce:	12 82       	std	Z+2, r1	; 0x02
    10d0:	13 82       	std	Z+3, r1	; 0x03
    10d2:	14 82       	std	Z+4, r1	; 0x04
    10d4:	15 82       	std	Z+5, r1	; 0x05
    10d6:	4e e1       	ldi	r20, 0x1E	; 30
    10d8:	46 83       	std	Z+6, r20	; 0x06
    10da:	17 82       	std	Z+7, r1	; 0x07

	program_memory[15] = assemble(IN, R24, PINA);
    10dc:	e1 ec       	ldi	r30, 0xC1	; 193
    10de:	f6 e0       	ldi	r31, 0x06	; 6
    10e0:	42 e0       	ldi	r20, 0x02	; 2
    10e2:	40 83       	st	Z, r20
    10e4:	11 82       	std	Z+1, r1	; 0x01
    10e6:	12 82       	std	Z+2, r1	; 0x02
    10e8:	13 82       	std	Z+3, r1	; 0x03
    10ea:	24 83       	std	Z+4, r18	; 0x04
    10ec:	15 82       	std	Z+5, r1	; 0x05
    10ee:	66 83       	std	Z+6, r22	; 0x06
    10f0:	17 82       	std	Z+7, r1	; 0x07
	program_memory[16] = assemble(ANDI, R24, (1 << BUTTON1));
    10f2:	e9 ec       	ldi	r30, 0xC9	; 201
    10f4:	f6 e0       	ldi	r31, 0x06	; 6
    10f6:	10 82       	st	Z, r1
    10f8:	51 83       	std	Z+1, r21	; 0x01
    10fa:	12 82       	std	Z+2, r1	; 0x02
    10fc:	13 82       	std	Z+3, r1	; 0x03
    10fe:	24 83       	std	Z+4, r18	; 0x04
    1100:	15 82       	std	Z+5, r1	; 0x05
    1102:	29 e0       	ldi	r18, 0x09	; 9
    1104:	26 83       	std	Z+6, r18	; 0x06
    1106:	17 82       	std	Z+7, r1	; 0x07
	program_memory[17] = assemble(BREQ, ISR_PCINT_end, 0x00);
    1108:	e1 ed       	ldi	r30, 0xD1	; 209
    110a:	f6 e0       	ldi	r31, 0x06	; 6
    110c:	10 82       	st	Z, r1
    110e:	11 82       	std	Z+1, r1	; 0x01
    1110:	12 82       	std	Z+2, r1	; 0x02
    1112:	13 82       	std	Z+3, r1	; 0x03
    1114:	23 e1       	ldi	r18, 0x13	; 19
    1116:	24 83       	std	Z+4, r18	; 0x04
    1118:	15 82       	std	Z+5, r1	; 0x05
    111a:	27 e1       	ldi	r18, 0x17	; 23
    111c:	26 83       	std	Z+6, r18	; 0x06
    111e:	17 82       	std	Z+7, r1	; 0x07
	program_memory[18] = assemble(OUT, PINA, R16);
    1120:	e9 ed       	ldi	r30, 0xD9	; 217
    1122:	f6 e0       	ldi	r31, 0x06	; 6
    1124:	30 83       	st	Z, r19
    1126:	11 82       	std	Z+1, r1	; 0x01
    1128:	12 82       	std	Z+2, r1	; 0x02
    112a:	13 82       	std	Z+3, r1	; 0x03
    112c:	44 83       	std	Z+4, r20	; 0x04
    112e:	15 82       	std	Z+5, r1	; 0x05
    1130:	96 83       	std	Z+6, r25	; 0x06
    1132:	17 82       	std	Z+7, r1	; 0x07
	program_memory[19] = assemble(RETI, 0x00, 0x00);
    1134:	e1 ee       	ldi	r30, 0xE1	; 225
    1136:	f6 e0       	ldi	r31, 0x06	; 6
    1138:	10 82       	st	Z, r1
    113a:	11 82       	std	Z+1, r1	; 0x01
    113c:	12 82       	std	Z+2, r1	; 0x02
    113e:	13 82       	std	Z+3, r1	; 0x03
    1140:	14 82       	std	Z+4, r1	; 0x04
    1142:	15 82       	std	Z+5, r1	; 0x05
    1144:	9f e1       	ldi	r25, 0x1F	; 31
    1146:	96 83       	std	Z+6, r25	; 0x06
    1148:	17 82       	std	Z+7, r1	; 0x07

	program_memory_initialized = true;
    114a:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <program_memory_initialized.1982>
    114e:	08 95       	ret

00001150 <program_memory_read>:
*
*                      - address: Address to instruction in program memory.
********************************************************************************/
uint64_t program_memory_read(const uint16_t address)
{
   if (address < PROGRAM_MEMORY_ADDRESS_WIDTH)
    1150:	89 31       	cpi	r24, 0x19	; 25
    1152:	91 05       	cpc	r25, r1
    1154:	90 f4       	brcc	.+36     	; 0x117a <program_memory_read+0x2a>
   {
      return program_memory[address];
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	fc 01       	movw	r30, r24
    1164:	e7 5b       	subi	r30, 0xB7	; 183
    1166:	f9 4f       	sbci	r31, 0xF9	; 249
    1168:	20 81       	ld	r18, Z
    116a:	31 81       	ldd	r19, Z+1	; 0x01
    116c:	42 81       	ldd	r20, Z+2	; 0x02
    116e:	53 81       	ldd	r21, Z+3	; 0x03
    1170:	64 81       	ldd	r22, Z+4	; 0x04
    1172:	75 81       	ldd	r23, Z+5	; 0x05
    1174:	86 81       	ldd	r24, Z+6	; 0x06
    1176:	97 81       	ldd	r25, Z+7	; 0x07
    1178:	08 95       	ret
   }
   else
   {
      return 0x00;
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
   }
}
    118a:	08 95       	ret

0000118c <stack_reset>:
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
   for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0c c0       	rjmp	.+24     	; 0x11aa <stack_reset+0x1e>
   {
      stack[i] = 0x00;
    1192:	fc 01       	movw	r30, r24
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	ee 0f       	add	r30, r30
    119a:	ff 1f       	adc	r31, r31
    119c:	ec 5e       	subi	r30, 0xEC	; 236
    119e:	f8 4f       	sbci	r31, 0xF8	; 248
    11a0:	10 82       	st	Z, r1
    11a2:	11 82       	std	Z+1, r1	; 0x01
    11a4:	12 82       	std	Z+2, r1	; 0x02
    11a6:	13 82       	std	Z+3, r1	; 0x03
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
   for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	84 36       	cpi	r24, 0x64	; 100
    11ac:	91 05       	cpc	r25, r1
    11ae:	88 f3       	brcs	.-30     	; 0x1192 <stack_reset+0x6>
   {
      stack[i] = 0x00;
   }

   sp = STACK_ADDRESS_WIDTH - 1;
    11b0:	83 e6       	ldi	r24, 0x63	; 99
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <sp+0x1>
    11b8:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <sp>
   stack_empty = true;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <stack_empty>
    11c2:	08 95       	ret

000011c4 <stack_push>:
*
*             - value: 8 bit value to push to the stack.
********************************************************************************/
int stack_push(const uint32_t value)
{
   if (sp == 0)
    11c4:	40 91 12 07 	lds	r20, 0x0712	; 0x800712 <sp>
    11c8:	50 91 13 07 	lds	r21, 0x0713	; 0x800713 <sp+0x1>
    11cc:	41 15       	cp	r20, r1
    11ce:	51 05       	cpc	r21, r1
    11d0:	51 f1       	breq	.+84     	; 0x1226 <stack_push+0x62>
   {
      return 1;
   }
   else
   {
      if (stack_empty)
    11d2:	20 91 11 07 	lds	r18, 0x0711	; 0x800711 <stack_empty>
    11d6:	22 23       	and	r18, r18
    11d8:	89 f0       	breq	.+34     	; 0x11fc <stack_push+0x38>
      {
         stack[sp] = value;
    11da:	9a 01       	movw	r18, r20
    11dc:	22 0f       	add	r18, r18
    11de:	33 1f       	adc	r19, r19
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	f9 01       	movw	r30, r18
    11e6:	ec 5e       	subi	r30, 0xEC	; 236
    11e8:	f8 4f       	sbci	r31, 0xF8	; 248
    11ea:	60 83       	st	Z, r22
    11ec:	71 83       	std	Z+1, r23	; 0x01
    11ee:	82 83       	std	Z+2, r24	; 0x02
    11f0:	93 83       	std	Z+3, r25	; 0x03
         stack_empty = false;
    11f2:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <stack_empty>
      }
      else
      {
         stack[--sp] = value;
      }
      return 0;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	08 95       	ret
         stack[sp] = value;
         stack_empty = false;
      }
      else
      {
         stack[--sp] = value;
    11fc:	9a 01       	movw	r18, r20
    11fe:	21 50       	subi	r18, 0x01	; 1
    1200:	31 09       	sbc	r19, r1
    1202:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <sp+0x1>
    1206:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <sp>
    120a:	22 0f       	add	r18, r18
    120c:	33 1f       	adc	r19, r19
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	f9 01       	movw	r30, r18
    1214:	ec 5e       	subi	r30, 0xEC	; 236
    1216:	f8 4f       	sbci	r31, 0xF8	; 248
    1218:	60 83       	st	Z, r22
    121a:	71 83       	std	Z+1, r23	; 0x01
    121c:	82 83       	std	Z+2, r24	; 0x02
    121e:	93 83       	std	Z+3, r25	; 0x03
      }
      return 0;
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	08 95       	ret
********************************************************************************/
int stack_push(const uint32_t value)
{
   if (sp == 0)
   {
      return 1;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
      {
         stack[--sp] = value;
      }
      return 0;
   }
}
    122a:	08 95       	ret

0000122c <stack_pop>:
* stack_pop: Returns 8 bit value popped from the stack. If the stack is empty,
*            the value 0x00 is returned.
********************************************************************************/
uint32_t stack_pop(void)
{
   if (stack_empty)
    122c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <stack_empty>
    1230:	81 11       	cpse	r24, r1
    1232:	29 c0       	rjmp	.+82     	; 0x1286 <stack_pop+0x5a>
   {
      return 0x00;
   }
   else
   {
      if (sp < STACK_ADDRESS_WIDTH - 1)
    1234:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <sp>
    1238:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <sp+0x1>
    123c:	83 36       	cpi	r24, 0x63	; 99
    123e:	91 05       	cpc	r25, r1
    1240:	98 f4       	brcc	.+38     	; 0x1268 <stack_pop+0x3c>
      {
         return stack[sp++];
    1242:	9c 01       	movw	r18, r24
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	30 93 13 07 	sts	0x0713, r19	; 0x800713 <sp+0x1>
    124c:	20 93 12 07 	sts	0x0712, r18	; 0x800712 <sp>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	fc 01       	movw	r30, r24
    125a:	ec 5e       	subi	r30, 0xEC	; 236
    125c:	f8 4f       	sbci	r31, 0xF8	; 248
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	08 95       	ret
      }
      else
      {
         stack_empty = true;
    1268:	21 e0       	ldi	r18, 0x01	; 1
    126a:	20 93 11 07 	sts	0x0711, r18	; 0x800711 <stack_empty>
         return stack[sp];
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	fc 01       	movw	r30, r24
    1278:	ec 5e       	subi	r30, 0xEC	; 236
    127a:	f8 4f       	sbci	r31, 0xF8	; 248
    127c:	60 81       	ld	r22, Z
    127e:	71 81       	ldd	r23, Z+1	; 0x01
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	93 81       	ldd	r25, Z+3	; 0x03
    1284:	08 95       	ret
********************************************************************************/
uint32_t stack_pop(void)
{
   if (stack_empty)
   {
      return 0x00;
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	cb 01       	movw	r24, r22
      {
         stack_empty = true;
         return stack[sp];
      }
   }
}
    128c:	08 95       	ret

0000128e <__tablejump2__>:
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	05 90       	lpm	r0, Z+
    1294:	f4 91       	lpm	r31, Z
    1296:	e0 2d       	mov	r30, r0
    1298:	09 94       	ijmp

0000129a <__ashrdi3>:
    129a:	97 fb       	bst	r25, 7
    129c:	10 f8       	bld	r1, 0

0000129e <__lshrdi3>:
    129e:	16 94       	lsr	r1
    12a0:	00 08       	sbc	r0, r0
    12a2:	0f 93       	push	r16
    12a4:	08 30       	cpi	r16, 0x08	; 8
    12a6:	98 f0       	brcs	.+38     	; 0x12ce <__lshrdi3+0x30>
    12a8:	08 50       	subi	r16, 0x08	; 8
    12aa:	23 2f       	mov	r18, r19
    12ac:	34 2f       	mov	r19, r20
    12ae:	45 2f       	mov	r20, r21
    12b0:	56 2f       	mov	r21, r22
    12b2:	67 2f       	mov	r22, r23
    12b4:	78 2f       	mov	r23, r24
    12b6:	89 2f       	mov	r24, r25
    12b8:	90 2d       	mov	r25, r0
    12ba:	f4 cf       	rjmp	.-24     	; 0x12a4 <__lshrdi3+0x6>
    12bc:	05 94       	asr	r0
    12be:	97 95       	ror	r25
    12c0:	87 95       	ror	r24
    12c2:	77 95       	ror	r23
    12c4:	67 95       	ror	r22
    12c6:	57 95       	ror	r21
    12c8:	47 95       	ror	r20
    12ca:	37 95       	ror	r19
    12cc:	27 95       	ror	r18
    12ce:	0a 95       	dec	r16
    12d0:	aa f7       	brpl	.-22     	; 0x12bc <__lshrdi3+0x1e>
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <_exit>:
    12d6:	f8 94       	cli

000012d8 <__stop_program>:
    12d8:	ff cf       	rjmp	.-2      	; 0x12d8 <__stop_program>
